/* 
	Created by Jactari
	Updated by Aspirin and Aendawyn
	Maintained by Aendawyn

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
	
*/

$(document).ready(function(){
    {
        function permalien_combat(){
            var donnees={
                saison:saison
            };

            for(var c in _camps){
                var camp=_camps[c];
                var camp_abr=_camps_abr[c];
                var protagoniste={};

                protagoniste.statut=$('#joueur-'+camp).is(':checked')?1:0;
                protagoniste.dolmens=parseInt($('#dolmens-'+camp).val(),10);
                if(camp_abr=='d'){
                    protagoniste.lieu=parseInt($('#lieu-defenseur').val(),10);
                    var forti=parseInt($('#fortification-defenseur option:selected').val(),10);
                    protagoniste.fortification=forti&3;
                    protagoniste.forts=(forti>>2)&7;
                    protagoniste.fort_principal=(forti>>5)&1
                }
                protagoniste.antimagie=competences_speciales[camp].antimagie;
                protagoniste.baliste=competences_speciales[camp].baliste;
                protagoniste.pieges=competences_speciales[camp].pieges;
                protagoniste.cri_de_guerre=parseInt($('#alliance-cri_de_guerre option:selected').val(),10);
                protagoniste.ralliement=parseInt($('#alliance-ralliement option:selected').val(),10);
                protagoniste.inspiration=parseInt($('#alliance-inspiration-'+camp+' option:selected').val(),10);
                if(camp_abr=='a')protagoniste.malus_attaque=parseInt($('#malus-attaque').val(),10);
                protagoniste.heros=$('#heros-'+camp).is(':checked')?1:0;
                protagoniste.niveau=parseInt($('#niveau-'+camp).val(),10);
                protagoniste.faction=parseInt($('#faction-'+camp).val(),10);
                protagoniste.archetype=parseInt($('#archetype-'+camp).val(),10);
                protagoniste.artefacts=[];
                for(var a=0;a<8;a++)protagoniste.artefacts[a]=parseInt($('#arte-'+a+'-'+camp).val(),10);
                if(camp_abr=='a')var heros=id_heros.attaquant;else var heros=id_heros.defenseur;
                if(heros!==null){
                    protagoniste.bonus_a=liste_heros[heros].bonus_a;
                    protagoniste.bonus_d=liste_heros[heros].bonus_d;
                    protagoniste.bonus_m=liste_heros[heros].bonus_m;
                    protagoniste.bonus_ap=liste_heros[heros].bonus_ap;
                    protagoniste.bonus_dp=liste_heros[heros].bonus_dp;
                    protagoniste.bonus_mp=liste_heros[heros].bonus_mp;
                    protagoniste.carrieres=[15,15,15,15];
                    protagoniste.nb_carrieres=0;
                    protagoniste.talents=[];
                    protagoniste.competence_utilisee=0;

                    // legendary classes and skills
                    protagoniste.legendary_sovereign_a = liste_heros[heros].niveau_legendary_sovereign_a;
                    protagoniste.legendary_sovereign_b = liste_heros[heros].niveau_legendary_sovereign_b;
                    protagoniste.legendary_sovereign_c = liste_heros[heros].niveau_legendary_sovereign_c;

                    protagoniste.legendary_legwarrior_a = liste_heros[heros].niveau_legendary_legwarrior_a;
                    protagoniste.legendary_legwarrior_b = liste_heros[heros].niveau_legendary_legwarrior_b;
                    protagoniste.legendary_legwarrior_c = liste_heros[heros].niveau_legendary_legwarrior_c;

                    protagoniste.legendary_magehunter_a = liste_heros[heros].niveau_legendary_magehunter_a;
                    protagoniste.legendary_magehunter_b = liste_heros[heros].niveau_legendary_magehunter_b;
                    protagoniste.legendary_magehunter_c = liste_heros[heros].niveau_legendary_magehunter_c;

                    protagoniste.legendary_legpaladin_a = liste_heros[heros].niveau_legendary_legpaladin_a;
                    protagoniste.legendary_legpaladin_b = liste_heros[heros].niveau_legendary_legpaladin_b;
                    protagoniste.legendary_legpaladin_c = liste_heros[heros].niveau_legendary_legpaladin_c;

                    protagoniste.legendary_ethernalnight_a = liste_heros[heros].niveau_legendary_ethernalnight_a;
                    protagoniste.legendary_ethernalnight_b = liste_heros[heros].niveau_legendary_ethernalnight_b;
                    protagoniste.legendary_ethernalnight_c = liste_heros[heros].niveau_legendary_ethernalnight_c;

                    protagoniste.legendary_kingundead_a = liste_heros[heros].niveau_legendary_kingundead_a;
                    protagoniste.legendary_kingundead_b = liste_heros[heros].niveau_legendary_kingundead_b;
                    protagoniste.legendary_kingundead_c = liste_heros[heros].niveau_legendary_kingundead_c;

                    protagoniste.legendary_legmagician_a = liste_heros[heros].niveau_legendary_legmagician_a;
                    protagoniste.legendary_legmagician_b = liste_heros[heros].niveau_legendary_legmagician_b;
                    protagoniste.legendary_legmagician_c = liste_heros[heros].niveau_legendary_legmagician_c;

                    protagoniste.legendary_dragonkinght_a = liste_heros[heros].niveau_legendary_dragonkinght_a;
                    protagoniste.legendary_dragonkinght_b = liste_heros[heros].niveau_legendary_dragonkinght_b;
                    protagoniste.legendary_dragonkinght_c = liste_heros[heros].niveau_legendary_dragonkinght_c;

                }
                for(var t in _talents_combat[camp]){
                    var carriere=_talents_combat[camp][t].c;
                    var talent=_talents_combat[camp][t].t;
                    var nom_machine=_talents[carriere][talent].nom_machine;
                    protagoniste[nom_machine]=parseInt($('#'+nom_machine+'-'+camp+' option:selected').text(),10);
                    if(heros!==null&&protagoniste[nom_machine]>0){
                        if(!inArray(protagoniste.carrieres,carriere)){
                            if(protagoniste.carrieres[1]==15){
                                protagoniste.carrieres[1]=carriere;
                                protagoniste.competence_utilisee++
                            }else if(protagoniste.carrieres[2]==15){
                                protagoniste.carrieres[2]=carriere;
                                protagoniste.competence_utilisee++
                            } else if(protagoniste.carrieres[3]==15) {
                                protagoniste.carrieres[3]=carriere;
                                protagoniste.competence_utilisee++
                            }
                            protagoniste.nb_carrieres++
                        }
                        if(inArray(protagoniste.carrieres,carriere)){
                            if(protagoniste.talents[carriere]===undefined)protagoniste.talents[carriere]=[];
                            if(protagoniste.talents[carriere][talent]===undefined)protagoniste.talents[carriere][talent]=protagoniste[nom_machine];
                            protagoniste.competence_utilisee+=protagoniste[nom_machine]*(1+((protagoniste[nom_machine]-1)/2))
                        }
                    }
                }
                protagoniste.instinct=[];
                protagoniste.expert=[];
                for(var i=0;i<4;i++){
                    protagoniste.instinct[i]=parseInt($('#instinct_'+i+'-'+camp+' option:selected').text(),10);
                    protagoniste.expert[i]=parseInt($('#expert_'+i+'-'+camp+' option:selected').text(),10);
                    var carriere=_ecoles_magie[i].carriere;
                    if(heros!==null&&protagoniste.instinct[i]>0){
                        if(!inArray(protagoniste.carrieres,carriere)){
                            if(protagoniste.carrieres[1]==15){
                                protagoniste.carrieres[1]=carriere;
                                protagoniste.competence_utilisee++
                            }else if(protagoniste.carrieres[2]==15){
                                protagoniste.carrieres[2]=carriere;
                                protagoniste.competence_utilisee++
                            }else if(protagoniste.carrieres[3]==15){
                                protagoniste.carrieres[3]=carriere;
                                protagoniste.competence_utilisee++
                            }
                            protagoniste.nb_carrieres++
                        }
                        if(inArray(protagoniste.carrieres,carriere)){
                            if(protagoniste.talents[carriere]===undefined)protagoniste.talents[carriere]=[];
                            if(protagoniste.talents[carriere][0]===undefined)protagoniste.talents[carriere][0]=protagoniste.instinct[i];
                            protagoniste.competence_utilisee+=protagoniste.instinct[i]*(1+((protagoniste.instinct[i]-1)/2))
                        }
                    }
                    if(heros!==null&&protagoniste.expert[i]>0){
                        if(!inArray(protagoniste.carrieres,carriere)){
                            if(protagoniste.carrieres[1]==15){
                                protagoniste.carrieres[1]=carriere;
                                protagoniste.competence_utilisee++
                            }else if(protagoniste.carrieres[2]==15){
                                protagoniste.carrieres[2]=carriere;
                                protagoniste.competence_utilisee++
                            }else if(protagoniste.carrieres[3]==15){
                                protagoniste.carrieres[3]=carriere;
                                protagoniste.competence_utilisee++
                            }
                            protagoniste.nb_carrieres++
                        }
                        if(inArray(protagoniste.carrieres,carriere)){
                            if(protagoniste.talents[carriere]===undefined)protagoniste.talents[carriere]=[];
                            if(protagoniste.talents[carriere][3]===undefined)protagoniste.talents[carriere][3]=protagoniste.expert[i];
                            protagoniste.competence_utilisee+=protagoniste.expert[i]*(1+((protagoniste.expert[i]-1)/2))
                        }
                    }
                }
                protagoniste.arcanes=parseInt($('#arcanes-'+camp+' option:selected').text(),10);
                if(heros!==null&&protagoniste.arcanes>0){
                    protagoniste.competence_utilisee+=protagoniste.arcanes*(1+((protagoniste.arcanes-1)/2));
                    for(var e in _ecoles_magie){
                        var carriere=_ecoles_magie[e].carriere;
                        if(inArray(protagoniste.carrieres,carriere)){
                            if(protagoniste.talents[carriere]===undefined)protagoniste.talents[carriere]=[];
                            if(protagoniste.talents[carriere][1]===undefined)protagoniste.talents[carriere][1]=protagoniste.arcanes
                        }
                    }
                }
                protagoniste.bonus_ecole=[];
                for(var e=0;e<4;e++)protagoniste.bonus_ecole[e]=parseInt($('#bonus-ecole-'+e+'-'+camp+' option:selected').text(),10);
                protagoniste.guildes=protagoniste.bonus_ecole;
                protagoniste.larmes=parseInt($('#larmes-'+camp).val(),10);
                protagoniste.graals=protagoniste.larmes;
                protagoniste.sort=[{
                    id:parseInt($('#sort-'+camp+'-1').val(),10),
                    tour:parseInt($('#sort-'+camp+'-1-tour').val(),10)
                },{
                    id:parseInt($('#sort-'+camp+'-2').val(),10),
                    tour:parseInt($('#sort-'+camp+'-2-tour').val(),10)
                }];
                protagoniste.troupes=[];
                for(var p=1;p<8;p++){
                    var u=parseInt($('#unite-armees-'+p+'-'+camp_abr).val(),10);
                    if (u == -1) {
                        u = 255;
                    }
                    var n=parseInt($('#nombre-unite-armees-'+p+'-'+camp_abr).val(),10);
                    if(n>65535)n=65535;
                    protagoniste.troupes[p]={
                        unite:u,
                        nombre:n
                    }
                }
                protagoniste.mhr={
                    signe:0,
                    valeur:0
                };

                var mhr=nombre_flottant($('#honneur-royaume-'+camp).val());
                if(mhr<0)protagoniste.mhr.signe=1;else protagoniste.mhr.signe=0;
                if(Math.abs(mhr)>1310.71)protagoniste.mhr.valeur=131071;else protagoniste.mhr.valeur=Math.floor(Math.abs(mhr)*100);
                for(var comp in _competences_hereditaires)if(_competences_hereditaires[comp].combat==1){
                    protagoniste[comp]=$('#competence-hereditaire-'+comp+'-'+camp).val()
                }
                protagoniste.classement_voies=$('#classement-voies-'+camp).val();
                donnees[camp_abr]=protagoniste;
                if(protagoniste.heros>0){
                    protagoniste.portrait=0;
                    protagoniste.bonus_tenancier=0;
                    protagoniste.respecialisations=0;
                    protagoniste.competence=protagoniste.niveau;
                    for(var c in _carrieres){
                        if(protagoniste.talents[c]===undefined)protagoniste.talents[c]=[];
                        for(var t in _talents[c]){
                            if(protagoniste.talents[c][t]===undefined)protagoniste.talents[c][t]=0
                        }
                    }
                    if(camp_abr=='a')var attaquant=protagoniste;
                    if(camp_abr=='d')var defenseur=protagoniste
                }
            }
            
            var lien = '<a href="?info='+encode_donnees_combat(donnees)+'">'+_traduction.permalien[_langue]+'</a>';
            if(attaquant!==undefined)lien+='<br /><a href="'+_traduction.heros_path[_langue]+'.html?info='+encode_donnees_heros(attaquant)+'">'+_traduction.heros_attaquant[_langue]+'</a>'+((attaquant.nb_carrieres>3)?_traduction.trop_de_carrieres[_langue]:'');
            if(defenseur!==undefined)lien+='<br /><a href="'+_traduction.heros_path[_langue]+'.html?info='+encode_donnees_heros(defenseur)+'">'+_traduction.heros_defenseur[_langue]+'</a>'+((defenseur.nb_carrieres>3)?_traduction.trop_de_carrieres[_langue]:'');
            return lien;
        }

        function analyse_info_url(code){
            var donnees=decode_donnees_combat(code);
            if(donnees===false){
                alert(_traduction.parametre_url_incorrect[_langue]);
                return false
            }
            saison=donnees.saison;
            $('#saison').val(donnees.saison);
            if (typeof $.cookie('jactari_cookie') != 'undefined') {
                var ver = cookieGetValueByKey('version');
                if (typeof ver != 'undefined') {
                    if (typeof ver != '') {
                        $('#saison').val(ver);
                    }
                }
            }
            
            controle_saison();
            for(var c in _camps){
                var camp=_camps[c];
                var camp_abr=_camps_abr[c];
                var protagoniste=donnees[camp_abr];
                if(protagoniste.statut==1){
                    $('#joueur-'+camp).attr('checked',true);
                    $('#pnj-'+camp).attr('checked',false)
                }else{
                    $('#joueur-'+camp).attr('checked',false);
                    $('#pnj-'+camp).attr('checked',true)
                }
                controle_statut_protagoniste(camp);
                if(protagoniste.heros)$('#heros-'+camp).attr('checked','checked');else $('#heros-'+camp).removeAttr('checked');
                $('#dolmens-'+camp).val(protagoniste.dolmens);
                if(c==1){
                    $('#lieu-defenseur').val(protagoniste.lieu);
                    if(protagoniste.fortification>0)$('#lieu-defenseur').val(1);
                    else if(protagoniste.forts>0)$('#lieu-defenseur').val(2);
                    controle_lieu();
                    $('#fortification-'+camp).val(protagoniste.fortification|(protagoniste.forts<<2)|(protagoniste.fort_principal<<5))
                }
                if(protagoniste.antimagie!==undefined){
                    $('#cs-antimagie-'+camp).val(protagoniste.antimagie);
                    $('#cs-baliste-'+camp).val(protagoniste.baliste);
                    $('#cs-pieges-'+camp).val(protagoniste.pieges)
                }
                $('#larmes-'+camp).val(protagoniste.larmes);
                if(c==0)$('#alliance-cri_de_guerre').val(protagoniste.cri_de_guerre);
                if(c==1)$('#alliance-ralliement').val(protagoniste.ralliement);
                $('#alliance-inspiration-'+camp).val(protagoniste.inspiration);
                if(c==0)$('#malus-attaque').val(protagoniste.malus_attaque);
                $('#niveau-'+camp).val(protagoniste.niveau);
                $('#faction-'+camp).val(protagoniste.faction);
                $('#archetype-'+camp).val(protagoniste.archetype);
                for(var a=0;a<8;a++)$('#arte-'+a+'-'+camp).val(protagoniste.artefacts[a]);
                for(var t in _talents_combat[camp]){
                    var carriere=_talents_combat[camp][t].c;
                    var talent=_talents_combat[camp][t].t;
                    var nom_machine=_talents[carriere][talent].nom_machine;
                    $('#'+nom_machine+'-'+camp).val(protagoniste[nom_machine])
                }
                for(var x in _talents_magie){
                    var carriere=_talents_magie[x].c;
                    var talent=_talents_magie[x].t;
                    var nom_machine=_talents[carriere][talent].nom_machine;
                    $('#'+nom_machine+'-'+camp).val(protagoniste[nom_machine])
                }
                controle_archetype(camp);
                for(var e=0;e<4;e++){
                    $('#bonus-ecole-'+e+'-'+camp).val(protagoniste.bonus_ecole[e])
                }
                for(var p=1;p<8;p++){
                    $('#unite-armees-'+p+'-'+camp_abr).val(protagoniste.troupes[p].unite);
                    controle_unite('unite-armees-'+p+'-'+camp_abr,protagoniste.troupes[p].unite);
                    $('#nombre-unite-armees-'+p+'-'+camp_abr).val(protagoniste.troupes[p].nombre)
                }
                controle_magie();
                $('#sort-'+camp+'-1').val(protagoniste.sort[0].id);
                $('#sort-'+camp+'-1-tour').val(protagoniste.sort[0].tour);
                controle_tours_magie();
                $('#sort-'+camp+'-2').val(protagoniste.sort[1].id);
                $('#sort-'+camp+'-2-tour').val(protagoniste.sort[1].tour);
                var mhr=(protagoniste.mhr.signe)?-1:1;
                mhr*=protagoniste.mhr.valeur/100;
                $('#honneur-royaume-'+camp).val(mhr);
                if(camp_abr=='a')honneur_royaume_attaquant=mhr;else honneur_royaume_defenseur=mhr;
                for(var comp in _competences_hereditaires)if(_competences_hereditaires[comp].combat==1){
                    $('#competence-hereditaire-'+comp+'-'+camp).val(protagoniste[comp])
                }
                $('#classement-voies-'+camp).val(protagoniste.classement_voies);

                // legendary classes and skills
                controle_legendary_classes(camp, protagoniste);
                
            }
            return true;
        }
    }

    {
        function bonus_magie_artefacts(heros,sort,arme_lanceur,arme_adversaire){
            var resultat={
                bonus:0,
                artefacts:'',
                armes:''
            };

            for(var s in _slots){
                var arte=heros['slot_'+s];
                var effets=_artefacts[arte].effets;
                var texte_effets='';
                for(var e in effets){
                    var effet=effets[e];
                    var tem=_types_effets_magie;
                    if(!inArray(tem.ensemble,effet.id))continue;
                    if(inArray(tem.e_invocation,effet.id))var ecole=0;
                    else if(inArray(tem.e_tenebres,effet.id))var ecole=1;
                    else if(inArray(tem.e_lumiere,effet.id))var ecole=2;
                    else if(inArray(tem.e_destruction,effet.id))var ecole=3;else var ecole=-1;
                    if(inArray(tem.infanterie,effet.id))var arme_adversaire_effet='I';
                    else if(inArray(tem.archerie,effet.id))var arme_adversaire_effet='R';
                    else if(inArray(tem.cavalerie,effet.id))var arme_adversaire_effet='C';else var arme_adversaire_effet=-1;
                    if(inArray(tem.cercle[1],effet.id))var cercle=1;
                    else if(inArray(tem.cercle[2],effet.id))var cercle=2;
                    else if(inArray(tem.cercle[3],effet.id))var cercle=3;
                    else if(inArray(tem.cercle[4],effet.id))var cercle=4;
                    else if(inArray(tem.cercle[5],effet.id))var cercle=5;else var cercle=-1;
                    if(inArray(tem.degats,effet.id))var type=0;
                    else if(inArray(tem.invocation,effet.id))var type=1;else var type=-1;
                    if(inArray(tem.attaque,effet.id))var cible=5;
                    else if(inArray(tem.defense,effet.id))var cible=6;else var cible=-1;
                    if(inArray(tem.degats_zone,effet.id))var unite=[1,7];
                    else if(inArray(tem.degats_directs,effet.id))var unite=[3];else var unite=-1;
                    if(inArray(tem.heros,effet.id))var cible_heros=1;else var cible_heros=-1;
                    var applicable=true;
                    if(ecole!=-1&&ecole!=sort.ecole)applicable=false;
                    if(arme_adversaire_effet!=-1){
                        if((sort.type==4||sort.type==2)&&arme_adversaire_effet!=arme_lanceur)applicable=false;
                        if((sort.type!=4&&sort.type!=2)&&arme_adversaire_effet!=arme_adversaire)applicable=false;
                        if(sort.unite==5&&sort.type==3)applicable=false;
                        if(sort.cible==7)applicable=false
                    }
                    if(cercle!=-1&&cercle!=sort.cercle)applicable=false;
                    if(type!=-1&&type!=sort.type)applicable=false;
                    if(cible!=-1&&cible!=sort.cible)applicable=false;
                    if(unite!=-1&&!inArray(unite,sort.unite))applicable=false;
                    if(cible_heros!=-1&&sort.unite!=5&&sort.unite!=6)applicable=false;
                    if(applicable){
                        resultat.bonus+=_effets[effet.id].v[effet.niv-1];
                        if(texte_effets!='')texte_effets+=' + ';
                        texte_effets+=_effets[effet.id].description[_langue].replace(/X/,_effets[effet.id].v[effet.niv-1]);
                        if(arme_adversaire_effet!=-1)resultat.armes+=image_html_arme(arme_adversaire_effet,1,true,'bonus X '+_artefacts[arte].nom[_langue])
                    }
                }
                if(texte_effets!==undefined&&texte_effets!=''){
                    if(resultat.artefacts!='')resultat.artefacts+=' + ';
                    resultat.artefacts+=_artefacts[arte].nom[_langue]+' ('+texte_effets+')'
                }
            }
            return resultat
        }

        function puissance_effective_sort(id_sort,camp,heros,arme_attaque,arme_defense){
            var sort=_sorts[id_sort];
            var puissance_sort=0;
            if(camp=='a'){
                var arme_lanceur=arme_attaque;
                var arme_adversaire=arme_defense
            }else if(camp=='d'){
                var arme_lanceur=arme_defense;
                var arme_adversaire=arme_attaque
            }
            if(inArray([0,2,4],sort.unite)){
                if(camp=='a')var arme=arme_attaque;
                else if(camp=='d')var arme=arme_defense;else return null
            }else if(inArray([1,3,5,6,7],sort.unite)){
                if(camp=='a')var arme=arme_defense;
                else if(camp=='d')var arme=arme_attaque;else return null
            }else{
                return null
            }
            var puissance_sort_base=sort.puissance;
            if(inArray(['I','R','C'],arme))var facteur=sort.facteur[arme];else return null;
            puissance_sort_base*=facteur;
            puissance_sort=puissance_sort_base;
            heros=liste_heros[heros];
            var base_magie=heros.magie;
            var bonus_magie=heros['bonus_instinct_'+sort.ecole]+heros.bonus_m;
            var multiplicateur_magie=1+(heros.bonus_mp/100);
            var magie=(base_magie*multiplicateur_magie)+bonus_magie;
            puissance_sort*=magie;
            var puissance_sort_magie=puissance_sort;
            var expert=heros['bonus_expert_'+sort.ecole]/100;
            switch(sort.ecole) {
                case 0: // summon
                    expert += (heros.bonus_legendary_kingundead_b/100);
                    expert += (heros.bonus_legendary_legmagician_a/100);
                    break;
                case 1: // dark
                    expert += (heros.bonus_legendary_ethernalnight_c/100);
                    expert += (heros.bonus_legendary_kingundead_a/100);
                    break;
                case 2: // light
                    expert += (heros.bonus_legendary_legpaladin_c/100);
                    expert += (heros.bonus_legendary_legmagician_b/100);
                    break;
                case 3: // destr
                    expert += (heros.bonus_legendary_dragonkinght_b/100);
                    break;
                default:
            }
            if(camp=='a'){
                var bonus_ecole=bonus_ecole_attaquant[sort.ecole];
                var niveau_maitrise=competences_hereditaires.attaquant.maitrise_des_sorts;
                var bonus_voie_maitrise=_multiplicateur_voie*_classement_voies[classement_voies.attaquant][_competences_hereditaires.maitrise_des_sorts.voie];
                var niveau_resistance=competences_hereditaires.defenseur.resistance_magique;
                var bonus_voie_resistance=_multiplicateur_voie*_classement_voies[classement_voies.defenseur][_competences_hereditaires.resistance_magique.voie];
                var niveau_antimagie=competences_speciales.defenseur.antimagie
            }else if(camp=='d'){
                var bonus_ecole=bonus_ecole_defenseur[sort.ecole];
                var niveau_maitrise=competences_hereditaires.defenseur.maitrise_des_sorts;
                var bonus_voie_maitrise=_multiplicateur_voie*_classement_voies[classement_voies.defenseur][_competences_hereditaires.maitrise_des_sorts.voie];
                var niveau_resistance=competences_hereditaires.attaquant.resistance_magique;
                var bonus_voie_resistance=_multiplicateur_voie*_classement_voies[classement_voies.attaquant][_competences_hereditaires.resistance_magique.voie];
                var niveau_antimagie=competences_speciales.attaquant.antimagie
            }else return null;
            var ecole=bonus_ecole/100;
            var bma=bonus_magie_artefacts(heros,sort,arme_lanceur,arme_adversaire);
            var efficacite=bma.bonus/100;
            var chms=_competences_hereditaires.maitrise_des_sorts;
            var bonus_maitrise=chms.bonus.valeur[niveau_maitrise];
            var cercle_maitrise=chms.bonus.cercle[niveau_maitrise];
            if(cercle_maitrise>=sort.cercle)var maitrise=(bonus_maitrise*(1+bonus_voie_maitrise))/100;else var maitrise=0;
            var bonus_resistance=_competences_hereditaires.resistance_magique.bonus[niveau_resistance];
            if(inArray([0,3],sort.type))var resistance=(bonus_resistance*(1+bonus_voie_resistance))/100;else var resistance=0;
            var antimagie=niveau_antimagie*_competences_speciales.antimagie.bonus/100;
            var multiplicateur_sort_sans_malus=1+expert+ecole+efficacite+maitrise;
            var multiplicateur_sort=multiplicateur_sort_sans_malus-resistance-antimagie;
            puissance_sort*=multiplicateur_sort;
            var largeur=150;
            var hauteur=10;
            var barre_bonus_malus_arme_sort='';
            var largeur_bonus_arme_sort=0;
            var largeur_malus_arme_sort=0;
            var icones_bonus_malus_arme='';
            if(facteur>1){
                var largeur_bonus_arme_sort=Math.round(((facteur-1)/facteur)*largeur);
                barre_bonus_malus_arme_sort+='<span class="barre bonus-arme-sort" title="'+_traduction.bonus_arme_sort[_langue]+'"';
                barre_bonus_malus_arme_sort+=' style="height:'+hauteur+'px;width:'+largeur_bonus_arme_sort+'px;"></span>';
                facteur=(1/facteur);
                icones_bonus_malus_arme+=image_html_arme(arme,1,true,_traduction.bonus[_langue]+' X '+sort.nom[_langue])
            }else if(facteur<1){
                var largeur_malus_arme_sort=Math.round((1-facteur)*largeur);
                barre_bonus_malus_arme_sort+='<span class="barre malus-arme-sort" title="'+_traduction.malus_arme_sort[_langue]+'"';
                barre_bonus_malus_arme_sort+=' style="height:'+hauteur+'px;width:'+largeur_malus_arme_sort+'px;"></span>';
                icones_bonus_malus_arme+=image_html_arme(arme,-1,true,_traduction.malus[_langue]+' X '+sort.nom[_langue])
            }
            var puissance_ref=multiplicateur_sort_sans_malus*puissance_sort_magie;
            var largeurs={};

            var part_amp=puissance_sort-(puissance_sort_base*base_magie*multiplicateur_sort)-(puissance_sort_base*heros['bonus_instinct_'+sort.ecole]*multiplicateur_sort)-(puissance_sort_base*heros.bonus_m*multiplicateur_sort);
            var part_i=puissance_sort-(puissance_sort_base*base_magie*multiplicateur_sort)-(puissance_sort_base*base_magie*(heros.bonus_mp/100)*multiplicateur_sort)-(puissance_sort_base*heros.bonus_m*multiplicateur_sort);
            var part_am=puissance_sort-(puissance_sort_base*base_magie*multiplicateur_sort)-(puissance_sort_base*heros['bonus_instinct_'+sort.ecole]*multiplicateur_sort)-(puissance_sort_base*base_magie*(heros.bonus_mp/100)*multiplicateur_sort);
            var part_mo=puissance_sort-(puissance_sort_base*heros['bonus_instinct_'+sort.ecole]*multiplicateur_sort)-(puissance_sort_base*heros.bonus_m*multiplicateur_sort)-(puissance_sort_base*base_magie*(heros.bonus_mp/100)*multiplicateur_sort);
            var part_ex=puissance_sort-(puissance_sort_magie*(multiplicateur_sort-expert));
            var part_g=puissance_sort-(puissance_sort_magie*(multiplicateur_sort-ecole));
            var part_ef=puissance_sort-(puissance_sort_magie*(multiplicateur_sort-efficacite));
            var part_mt=puissance_sort-(puissance_sort_magie*(multiplicateur_sort-maitrise));
            var toutes_parts=part_amp+part_i+part_am+part_mo+part_ex+part_g+part_ef+part_mt;
            part_amp*=(puissance_sort/toutes_parts);
            part_i*=(puissance_sort/toutes_parts);
            part_am*=(puissance_sort/toutes_parts);
            part_mo*=(puissance_sort/toutes_parts);
            part_ex*=(puissance_sort/toutes_parts);
            part_g*=(puissance_sort/toutes_parts);
            part_ef*=(puissance_sort/toutes_parts);
            part_mt*=(puissance_sort/toutes_parts);
            largeurs.amp=Math.round((part_amp/puissance_ref)*facteur*largeur);
            largeurs.i=Math.round((part_i/puissance_ref)*facteur*largeur);
            largeurs.am=Math.round((part_am/puissance_ref)*facteur*largeur);
            largeurs.mo=Math.round((part_mo/puissance_ref)*facteur*largeur);
            largeurs.ex=Math.round((part_ex/puissance_ref)*facteur*largeur);
            largeurs.g=Math.round((part_g/puissance_ref)*facteur*largeur);
            largeurs.ef=Math.round((part_ef/puissance_ref)*facteur*largeur);
            largeurs.mt=Math.round((part_mt/puissance_ref)*facteur*largeur);
            var part_resistance=puissance_sort_magie*resistance;
            largeurs.resistance=Math.round((part_resistance/puissance_ref)*facteur*largeur);
            var part_antimagie=puissance_sort_magie*antimagie;
            largeurs.antimagie=Math.round((part_antimagie/puissance_ref)*facteur*largeur);
            var ecart_largeur=largeur-largeur_bonus_arme_sort-largeur_malus_arme_sort-largeurs.amp-largeurs.i-largeurs.am-largeurs.mo-largeurs.ex-largeurs.g-largeurs.ef-largeurs.mt-largeurs.resistance-largeurs.antimagie;
            largeurs[maxInArrayIndex(largeurs)]+=ecart_largeur;
            var details='<div class="details-sort'+(detail_sorts?'':' cache')+'">';
            if(camp=='d')details+=icones_bonus_malus_arme+bma.armes;
            details+='<div class="barre sort" style="line-height:'+hauteur+'px;height:'+hauteur+'px;width:'+largeur+'px;">';
            details+=barre_bonus_malus_arme_sort;
            details+='<span class="barre base-magie" title="'+_traduction.magie_base[_langue]+' = '+formate_nombre_tooltip(base_magie,0)+'" style="height:'+hauteur+'px;width:'+largeurs.mo+'px;"></span>';
            details+='<span class="barre arte-pc-mag" title="'+_traduction.bonus_magie_artefacts[_langue]+' = '+formate_nombre_tooltip(heros.bonus_mp,0)+' %" style="height:'+hauteur+'px;width:'+largeurs.amp+'px;"></span>';
            details+='<span class="barre instinct" title="'+_talents[_ecoles_magie[sort.ecole].carriere][0].nom[_langue]+' = '+formate_nombre_tooltip(heros['bonus_instinct_'+sort.ecole],0)+'" style="height:'+hauteur+'px;width:'+largeurs.i+'px;"></span>';
            details+='<span class="barre arte-p-mag" title="'+_traduction.bonus_magie_artefacts[_langue]+' = +'+formate_nombre_tooltip(heros.bonus_m,0)+'" style="height:'+hauteur+'px;width:'+largeurs.am+'px;"></span>';
            details+='<span class="barre expert" title="'+_talents[_ecoles_magie[sort.ecole].carriere][3].nom[_langue]+' = '+formate_nombre_tooltip((expert*100),0)+' %" style="height:'+hauteur+'px;width:'+largeurs.ex+'px;"></span>';
            details+='<span class="barre guildes" title="'+_traduction.guildes[_langue]+' '+_ecoles_magie[sort.ecole].nom[_langue]+' = '+formate_nombre_tooltip((ecole*100),0)+' %" style="height:'+hauteur+'px;width:'+largeurs.g+'px;"></span>';
            details+='<span class="barre arte-pc-eff" title="'+_traduction.bonus_efficacite_artefacts[_langue]+' = '+formate_nombre_tooltip((efficacite*100),0)+' % = '+bma.artefacts+'" style="height:'+hauteur+'px;width:'+largeurs.ef+'px;"></span>';
            details+='<span class="barre maitrise" title="'+_competences_hereditaires.maitrise_des_sorts.nom[_langue]+' = '+formate_nombre_tooltip((maitrise*100),0)+' %" style="height:'+hauteur+'px;width:'+largeurs.mt+'px;"></span>';
            details+='<span class="barre resistance" title="'+_competences_hereditaires.resistance_magique.nom[_langue]+' = -'+formate_nombre_tooltip((resistance*100),0)+' %" style="height:'+hauteur+'px;width:'+largeurs.resistance+'px;"></span>';
            details+='<span class="barre antimagie" title="'+_competences_speciales.antimagie.nom[_langue]+' = -'+formate_nombre_tooltip((antimagie*100),0)+' %" style="height:'+hauteur+'px;width:'+largeurs.antimagie+'px;"></span>';
            details+='</div>';
            if(camp=='a')details+=icones_bonus_malus_arme+bma.armes;
            details+='</div>';
            return{
                puissance:puissance_sort,
                details:details
            }
        }

        function lancement_sorts(tour){
            var peloton_attaquant=pelotons_attaquant[peloton_attaque];
            var peloton_defenseur=pelotons_defenseur[peloton_defense];
            var arme_attaque=_unites[peloton_attaquant.type].arme;
            var arme_defense=_unites[peloton_defenseur.type].arme;
            var cast={
                a:{
                    puissance:0,
                    type:'',
                    cible:'',
                    nombre:0,
                    calcul:'',
                    bonus:0,
                    issue:'',
                    details:''
                },
                d:{
                    puissance:0,
                    type:'',
                    cible:'',
                    nombre:0,
                    calcul:'',
                    bonus:0,
                    issue:'',
                    details:''
                }
            };

            if(sorts.attaquant[tour]!==undefined){
                var id_sort=sorts.attaquant[tour];
                cast.a.sort=id_sort;
                var sort=_sorts[id_sort];
                cast.a.ecole=sort.ecole;
                cast.a.type=_types_sorts[sort.type][_langue];
                if(sort.type==1)arme_attaque=_cibles_sorts[sort.cible].arme;
                var pes=puissance_effective_sort(id_sort,'a',id_heros.attaquant,arme_attaque,arme_defense);
                cast.a.puissance=pes.puissance;
                cast.a.details=pes.details;
                if(cast.a.puissance!==null){
                    switch(sort.type){
                        case 4:
                            switch(sort.cible){
                                case 5:
                                    avertissement(_traduction.alerte_buffs[_langue]);
                                    switch(sort.unite){
                                        case 0:case 1:
                                            if(peloton_attaque>=0){
                                                cast.a.cible=_unites[peloton_attaquant.type].nom[_langue];
                                                cast.a.calcul=_unites_sorts[sort.unite][_langue];
                                                var unites_ameliorees=peloton_attaquant.nombre_restant;
                                                cast.a.bonus=cast.a.puissance*unites_ameliorees;
                                                cast.a.nombre=Math.floor(cast.a.bonus/_unites[peloton_attaquant.type].puissance);
                                                peloton_attaquant.nombre_restant+=cast.a.nombre;
                                                peloton_attaquant.nombre_bonus+=cast.a.nombre;
                                                cast.a.issue=cast.a.type+' '+_traduction.attaque[_langue]+' ';
                                                cast.a.issue+=image_html_troupe(peloton_attaquant.type,2)+_traduction.deux_points[_langue];
                                                cast.a.issue+=' <strong>+'+formate_puissance(cast.a.nombre)+' '+((cast.a.nombre>1)?_traduction.unites[_langue]:_traduction.unite[_langue])+'</strong>';
                                                cast.a.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue];
                                                cast.a.issue+=' +'+formate_puissance(cast.a.puissance)+cast.a.calcul+' ['+formate_puissance(unites_ameliorees)+'], ';
                                                cast.a.issue+=_traduction.soit[_langue]+' +'+formate_puissance(cast.a.bonus)+')';
                                                cast.a.bonus=0
                                            }
                                            else{
                                                cast.a.issue=cast.a.type+_traduction.deux_points[_langue]+' '+_traduction.pas_de_peloton_cible[_langue]+'.'
                                            }
                                            break;
                                        case 2:case 3:
                                            cast.a.cible=_unites[peloton_attaquant.type].nom[_langue];
                                            cast.a.calcul=_unites_sorts[sort.unite][_langue];
                                            var puissance_peloton=_unites[peloton_attaquant.type].puissance*peloton_attaquant.nombre_restant;
                                            cast.a.bonus=(cast.a.puissance/100)*puissance_peloton;
                                            cast.a.nombre=Math.floor(cast.a.bonus/_unites[peloton_attaquant.type].puissance);
                                            peloton_attaquant.nombre_restant+=cast.a.nombre;
                                            peloton_attaquant.nombre_bonus+=cast.a.nombre;
                                            cast.a.issue=cast.a.type+' '+_traduction.attaque[_langue]+' ';
                                            cast.a.issue+=image_html_troupe(peloton_attaquant.type,2)+_traduction.deux_points[_langue];
                                            cast.a.issue+=' <strong>+'+formate_puissance(cast.a.nombre)+' '+((cast.a.nombre>1)?_traduction.unites[_langue]:_traduction.unite[_langue])+'</strong>';
                                            cast.a.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue];
                                            cast.a.issue+=' +'+formate_puissance(cast.a.puissance)+cast.a.calcul+' '+_traduction.de[_langue]+' '+formate_puissance(puissance_peloton)+', ';
                                            cast.a.issue+=_traduction.soit[_langue]+' +'+formate_puissance(cast.a.bonus)+')';
                                            break;
                                        default:
                                            cast.a.issue=_traduction.erreur_calcul_sort_incoherent[_langue];
                                            break
                                    }
                                    break;
                                case 6:case 7:
                                    cast.a.issue=_traduction.amelioration_defense_inutile[_langue];
                                    break;
                                case 0:case 1:case 2:case 3:case 4:case 8:case 9:
                                    cast.a.issue=_traduction.erreur_cible_sort_incompatible[_langue];
                                    break;
                                default:
                                    cast.a.issue=_traduction.erreur_cible_sort_inconnue[_langue];
                                    break
                            }
                            break;
                        case 3:
                            switch(sort.cible){
                                case 6:
                                    if(liste_heros[id_heros.defenseur]!==undefined){
                                        var heros=liste_heros[id_heros.defenseur];
                                        var defense=heros.defense_modifiee;
                                        switch(sort.unite){
                                            case 5:
                                                cast.a.cible=_traduction.heros_defenseur[_langue];
                                                if(cast.a.puissance>defense)cast.a.debuff_heros=defense;else cast.a.debuff_heros=cast.a.puissance;
                                                cast.a.nombre=defense-cast.a.debuff_heros;
                                                heros.defense_modifiee=cast.a.nombre;
                                                cast.a.issue=cast.a.type+' '+cast.a.cible+_traduction.deux_points[_langue];
                                                cast.a.issue+=' -'+formate_puissance(cast.a.puissance)+' '+_traduction.defense[_langue];
                                                cast.a.issue+=' ('+formate_puissance(defense)+' => <strong>'+formate_puissance(cast.a.nombre)+'</strong>)';
                                                break;
                                            case 6:
                                                cast.a.cible=_traduction.heros_defenseur[_langue];
                                                cast.a.calcul=_unites_sorts[sort.unite][_langue];
                                                cast.a.debuff_heros=defense*(cast.a.puissance/100);
                                                cast.a.nombre=defense-cast.a.debuff_heros;
                                                cast.a.issue=cast.a.type+' '+cast.a.cible+_traduction.deux_points[_langue]+' '+formate_puissance(cast.a.nombre)+' '+_traduction.defense[_langue]+' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue]+' -'+formate_nombre(cast.a.puissance,2)+cast.a.calcul+', '+_traduction.soit[_langue]+' -'+formate_puissance(cast.a.debuff_heros)+')';
                                                break;
                                            default:
                                                cast.a.issue=_traduction.erreur_calcul_sort_incoherent[_langue];
                                                break
                                        }
                                    }else{
                                        cast.a.issue=cast.a.type+_traduction.deux_points[_langue]+' '+_traduction.pas_de_heros_defenseur_cible[_langue]+'.'
                                    }
                                    break;
                                case 7:
                                    cast.a.puissance=Math.round(cast.a.puissance*10)/10;
                                    switch(sort.unite){
                                        case 3:
                                            cast.a.calcul=_unites_sorts[sort.unite][_langue];
                                            cast.a.cible=_traduction.defense_region[_langue];
                                            if(lieu==1)var bonus_defense_cite_region=bonus_defense_cite;
                                            else if(lieu==2){
                                                var bonus_defense_cite_region=bonus_defense_region;
                                                avertissement(_traduction.alerte_seisme_region[_langue])
                                            }
                                            else{
                                                cast.a.issue=_traduction.alteration_defense_region_inutile[_langue];
                                                break
                                            }
                                            var bonus_defense_original=bonus_defense_cite_region;
                                            bonus_defense_cite_region=Math.floor((bonus_defense_cite_region-cast.a.puissance)*100)/100;
                                            if(bonus_defense_cite_region<0)bonus_defense_cite_region=0;
                                            if(lieu==1)bonus_defense_cite=bonus_defense_cite_region;
                                            else if(lieu==2)bonus_defense_region=bonus_defense_cite_region;
                                            cast.a.nombre=bonus_defense_cite_region;
                                            cast.a.issue=cast.a.type+' '+cast.a.cible+_traduction.deux_points[_langue];
                                            cast.a.issue+=' -'+formate_puissance(cast.a.puissance)+cast.a.calcul;
                                            cast.a.issue+=' ('+formate_puissance(bonus_defense_original)+cast.a.calcul;
                                            cast.a.issue+=' => <strong>'+formate_puissance(cast.a.nombre)+cast.a.calcul+'</strong>)';
                                            break;
                                        default:
                                            cast.a.issue=_traduction.erreur_calcul_sort_incoherent[_langue];
                                            break
                                    }
                                    break;
                                case 5:
                                    cast.a.issue=_traduction.alteration_attaque_inutile[_langue];
                                    break;
                                case 0:case 1:case 2:case 3:case 4:case 8:case 9:
                                    cast.a.issue=_traduction.erreur_cible_sort_incompatible[_langue];
                                    break;
                                default:
                                    cast.a.issue=_traduction.erreur_cible_sort_inconnue[_langue];
                                    break
                            }
                            break;
                        case 0:
                            switch(sort.cible){
                                case 4:
                                    if(peloton_defense>=0){
                                        if(peloton_defenseur!==undefined){
                                            cast.a.cible=_cibles_sorts[sort.cible][_langue];
                                            var degats=0;
                                            switch(sort.unite){
                                                case 1:
                                                    degats=cast.a.puissance*peloton_defenseur.nombre_restant;
                                                    cast.a.calcul=_unites_sorts[sort.unite][_langue]+' ['+formate_puissance(peloton_defenseur.nombre_restant)+']';
                                                    break;
                                                case 3:
                                                    var puissance_peloton=_unites[peloton_defenseur.type].puissance*peloton_defenseur.nombre_restant;
                                                    degats=(cast.a.puissance/100)*puissance_peloton;
                                                    cast.a.calcul=_unites_sorts[sort.unite][_langue]+' '+_traduction.de[_langue]+' '+formate_puissance(puissance_peloton);
                                                    break;
                                                case 7:
                                                    degats=cast.a.puissance;
                                                    cast.a.calcul=_unites_sorts[sort.unite][_langue];
                                                    break;
                                                default:
                                                    degats=null;
                                                    cast.a.issue=_traduction.erreur_calcul_sort_incoherent[_langue];
                                                    break
                                            }
                                            if(degats!==null){
                                                if(degats>(_unites[peloton_defenseur.type].puissance*peloton_defenseur.nombre_restant))degats=_unites[peloton_defenseur.type].puissance*peloton_defenseur.nombre_restant;
                                                var morts=Math.floor(degats/_unites[peloton_defenseur.type].puissance);
                                                peloton_defenseur.nombre_restant-=morts;
                                                peloton_defenseur.nombre_pertes_magie+=morts;
                                                cast.a.nombre=morts;
                                                cast.a.issue=cast.a.type+' '+cast.a.cible+_traduction.deux_points[_langue];
                                                cast.a.issue+=' <strong>-'+formate_puissance(cast.a.nombre)+'</strong> '+image_html_troupe(peloton_defenseur.type,2);
                                                cast.a.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue];
                                                cast.a.issue+=' '+formate_nombre(cast.a.puissance,2)+cast.a.calcul;
                                                cast.a.issue+=((sort.unite!=7)?(', '+_traduction.soit[_langue]+' '+formate_puissance(degats)):'')+')'
                                            }
                                        }
                                        else{
                                            cast.a.issue=_traduction.erreur_peloton_indefini[_langue]
                                        }
                                    }else{
                                        cast.a.issue=cast.a.type+_traduction.deux_points[_langue]+' '+_traduction.pas_de_peloton_cible[_langue]+'.'
                                    }
                                    break;
                                case 3:
                                    cast.a.cible=_cibles_sorts[sort.cible][_langue];
                                    var massacre='';
                                    var puissance_massacree=0;
                                    for(var p=0;p<9;p++)if(pelotons_defenseur[p]!==undefined){
                                        var peloton=pelotons_defenseur[p];
                                        var pes=puissance_effective_sort(id_sort,'a',id_heros.attaquant,arme_attaque,_unites[peloton.type].arme);
                                        cast.a.puissance=pes.puissance;
                                        if(cast.a.puissance!==null){
                                            var degats=null;
                                            switch(sort.unite){
                                                case 1:
                                                    degats=cast.a.puissance*peloton.nombre_restant;
                                                    cast.a.calcul=_unites_sorts[sort.unite][_langue];
                                                    break;
                                                case 3:
                                                    degats=(cast.a.puissance/100)*_unites[peloton.type].puissance*peloton.nombre_restant;
                                                    cast.a.calcul=_unites_sorts[sort.unite][_langue];
                                                    break;
                                                default:
                                                    degats=null;
                                                    cast.a.issue=_traduction.erreur_calcul_sort_incoherent[_langue];
                                                    break
                                            }
                                            if(degats!==null){
                                                if(degats>(_unites[peloton.type].puissance*peloton.nombre_restant))degats=_unites[peloton.type].puissance*peloton.nombre_restant;
                                                var morts=Math.floor(degats/_unites[peloton.type].puissance);
                                                peloton.nombre_restant-=morts;
                                                peloton.nombre_pertes_magie+=morts;
                                                cast.a.nombre=morts;
                                                massacre+='-'+formate_puissance(cast.a.nombre)+' '+image_html_troupe(peloton.type,3)+' ';
                                                puissance_massacree+=morts*_unites[peloton.type].puissance
                                            }
                                        }else{
                                            cast.a.issue=_traduction.erreur_calcul_puissance_sort[_langue];
                                            break
                                        }
                                    }
                                    cast.a.issue=cast.a.type+' '+cast.a.cible+_traduction.deux_points[_langue];
                                    cast.a.issue+=' <strong>'+massacre+'</strong>';
                                    cast.a.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue];
                                    cast.a.issue+=' '+formate_nombre(cast.a.puissance,2)+cast.a.calcul;
                                    cast.a.issue+=' '+_traduction.soit[_langue]+' '+formate_nombre(puissance_massacree,0)+' '+_traduction.puissance[_langue]+' '+_traduction.eliminee[_langue]+')';
                                    break;
                                case 0:case 1:case 2:case 5:case 6:case 7:case 8:case 9:
                                    cast.a.issue=_traduction.erreur_cible_sort_incompatible[_langue];
                                    break;
                                default:
                                    cast.a.issue=_traduction.erreur_cible_sort_inconnue[_langue];
                                    break
                            }
                            break;
                        case 1:
                            var unite_invoquee=null;
                            if(sort.cible<3&&sort.cible>=0){
                                for(var u in _unites){
                                    if(_unites[u].faction==liste_heros[id_heros.attaquant].faction){
                                        if(_unites[u].arme==_cibles_sorts[sort.cible].arme){
                                            unite_invoquee=u;
                                            break
                                        }
                                    }
                                }
                            }else{
                                cast.a.issue=_traduction.erreur_cible_sort_incompatible[_langue];
                                cast.a.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue]+' '+formate_puissance(cast.a.puissance)+')';
                                break
                            }
                            if(unite_invoquee!==null){
                                cast.a.cible=_unites[unite_invoquee].nom[_langue];
                                var puissance_invoquee=0;
                                switch(sort.unite){
                                    case 0:
                                        puissance_invoquee=cast.a.puissance;
                                        break;
                                    case 4:
                                        var puissance_armee_adverse=0;
                                        for(var p in pelotons_defenseur){
                                            if(p>=2){
                                                puissance_armee_adverse+=_unites[pelotons_defenseur[p].type].puissance*pelotons_defenseur[p].nombre
                                            }
                                        }
                                        cast.a.calcul=formate_nombre(cast.a.puissance,2)+_unites_sorts[sort.unite][_langue]+' ['+formate_puissance(puissance_armee_adverse)+'], '+_traduction.soit[_langue]+' ';
                                        puissance_invoquee=Math.floor((cast.a.puissance/100)*puissance_armee_adverse);
                                        break;
                                    default:
                                        cast.a.issue=_traduction.erreur_calcul_sort_incoherent[_langue];
                                        cast.a.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue]+' '+formate_puissance(cast.a.puissance)+')';
                                        puissance_invoquee=null;
                                        break
                                }
                                if(puissance_invoquee!==null){
                                    cast.a.nombre=Math.floor(puissance_invoquee/_unites[unite_invoquee].puissance);
                                    var p=1;
                                    if(pelotons_attaquant[p]!==undefined)p=0;
                                    pelotons_attaquant[p]={
                                        type:unite_invoquee,
                                        nombre:cast.a.nombre,
                                        nombre_debut_tour:cast.a.nombre,
                                        nombre_debut_combat:cast.a.nombre,
                                        nombre_restant:cast.a.nombre,
                                        nombre_pertes:0,
                                        nombre_pertes_magie:0,
                                        nombre_bonus:0,
                                        nombre_bonus_perdu:0
                                    };

                                    peloton_attaque=p;
                                    peloton_attaquant=pelotons_attaquant[peloton_attaque];
                                    arme_attaque=_unites[peloton_attaquant.type].arme;
                                    cast.a.issue=cast.a.type+image_html_arme(_cibles_sorts[sort.cible].arme,0)+_traduction.deux_points[_langue];
                                    cast.a.issue+=' <strong>'+formate_puissance(cast.a.nombre)+'</strong> '+image_html_troupe(unite_invoquee,2);
                                    cast.a.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue];
                                    cast.a.issue+=' '+cast.a.calcul+formate_puissance(puissance_invoquee)+')'
                                }
                            }
                            else{
                                cast.a.issue=_traduction.pas_d_unite_invocable[_langue];
                                cast.a.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue]+' '+cast.a.puissance+')';
                                cast.a.nombre=0
                            }
                            break;
                        case 2:
                            avertissement(_traduction.alerte_resurrection[_langue]);
                            if(sort.cible==8||sort.cible==9){
                                cast.a.rez_peloton=peloton_attaque;
                                if(sort.cible==8){
                                    cast.a.rez='tmp'
                                }else{
                                    cast.a.rez='def'
                                }
                                if(sort.unite==2){
                                    cast.a.calcul=_unites_sorts[sort.unite][_langue]
                                }else{
                                    cast.a.issue=_traduction.erreur_calcul_sort_incoherent[_langue];
                                    cast.a.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue]+' '+formate_puissance(cast.a.puissance)+')'
                                }
                            }else{
                                cast.a.issue=_traduction.erreur_cible_sort_incompatible[_langue]
                            }
                            break;
                        default:
                            cast.a.issue=_traduction.erreur_type_sort_inconnu[_langue];
                            break
                    }
                }else{
                    cast.a.issue=_traduction.erreur_calcul_puissance_sort[_langue]
                }
            }
            if(sorts.defenseur[tour]!==undefined){
                var id_sort=sorts.defenseur[tour];
                cast.d.sort=id_sort;
                var sort=_sorts[id_sort];
                cast.d.ecole=sort.ecole;
                cast.d.type=_types_sorts[sort.type][_langue];
                if(sort.type==1)arme_defense=_cibles_sorts[sort.cible].arme;
                var pes=puissance_effective_sort(id_sort,'d',id_heros.defenseur,arme_attaque,arme_defense);
                cast.d.puissance=pes.puissance;
                cast.d.details=pes.details;
                if(cast.d.puissance!==null){
                    switch(sort.type){
                        case 4:
                            switch(sort.cible){
                                case 6:
                                    avertissement(_traduction.alerte_buffs[_langue]);
                                    switch(sort.unite){
                                        case 0:case 1:
                                            if(peloton_defense>=0){
                                                cast.d.cible=pelotons_defenseur[peloton_defense].type;
                                                cast.d.calcul=_unites_sorts[sort.unite][_langue];
                                                var unites_ameliorees=peloton_defenseur.nombre_restant;
                                                cast.d.bonus=cast.d.puissance*unites_ameliorees;
                                                cast.d.nombre=Math.floor(cast.d.bonus/_unites[cast.d.cible].puissance);
                                                peloton_defenseur.nombre_restant+=cast.d.nombre;
                                                peloton_defenseur.nombre_bonus+=cast.d.nombre;
                                                cast.d.issue=cast.d.type+' '+_traduction.defense[_langue]+' ';
                                                cast.d.issue+=image_html_troupe(cast.d.cible,2)+_traduction.deux_points[_langue];
                                                cast.d.issue+=' <strong>+'+formate_puissance(cast.d.nombre)+' '+((cast.d.nombre>1)?_traduction.unites[_langue]:_traduction.unite[_langue])+'</strong>';
                                                cast.d.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue];
                                                cast.d.issue+=' +'+formate_puissance(cast.d.puissance)+cast.d.calcul+' ['+formate_puissance(unites_ameliorees)+'], ';
                                                cast.d.issue+=_traduction.soit[_langue]+' +'+formate_puissance(cast.d.bonus)+')';
                                                cast.d.bonus=0
                                            }else{
                                                cast.d.issue=cast.d.type+_traduction.deux_points[_langue]+' '+_traduction.pas_de_peloton_cible[_langue]+'.'
                                            }
                                            break;
                                        case 2:case 3:
                                            cast.d.cible=pelotons_defenseur[peloton_defense].type;
                                            cast.d.calcul=_unites_sorts[sort.unite][_langue];
                                            var puissance_peloton=_unites[cast.d.cible].puissance*pelotons_defenseur[peloton_defense].nombre_restant;
                                            cast.d.bonus=(cast.d.puissance/100)*puissance_peloton;
                                            cast.d.nombre=Math.floor(cast.d.bonus/_unites[cast.d.cible].puissance);
                                            peloton_defenseur.nombre_restant+=cast.d.nombre;
                                            peloton_defenseur.nombre_bonus+=cast.d.nombre;
                                            cast.d.issue=cast.d.type+' '+_traduction.defense[_langue]+' ';
                                            cast.d.issue+=image_html_troupe(cast.d.cible,2)+_traduction.deux_points[_langue];
                                            cast.d.issue+=' <strong>+'+formate_puissance(cast.d.nombre)+' '+((cast.d.nombre>1)?_traduction.unites[_langue]:_traduction.unite[_langue])+'</strong>';
                                            cast.d.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue];
                                            cast.d.issue+=' +'+formate_puissance(cast.d.puissance)+cast.d.calcul;
                                            cast.d.issue+=' '+_traduction.de[_langue]+' '+formate_puissance(puissance_peloton)+', ';
                                            cast.d.issue+=_traduction.soit[_langue]+' '+formate_puissance(cast.d.bonus)+')';
                                            break;
                                        default:
                                            cast.d.issue=_traduction.erreur_calcul_sort_incoherent[_langue];
                                            cast.d.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue]+' '+formate_puissance(cast.d.puissance)+')';
                                            break
                                    }
                                    break;
                                case 5:
                                    cast.d.issue=_traduction.amelioration_attaque_inutile[_langue];
                                    break;
                                case 0:case 1:case 2:case 3:case 4:case 7:case 8:case 9:
                                    cast.a.issue=_traduction.erreur_cible_sort_incompatible[_langue];
                                    break;
                                default:
                                    cast.d.issue=_traduction.erreur_cible_sort_inconnue[_langue];
                                    break
                            }
                            break;
                        case 3:
                            switch(sort.cible){
                                case 5:
                                    if(liste_heros[id_heros.attaquant]!==undefined){
                                        var heros=liste_heros[id_heros.attaquant];
                                        var attaque=heros.attaque_modifiee;
                                        switch(sort.unite){
                                            case 5:
                                                cast.d.cible=_traduction.heros_attaquant[_langue];
                                                if(cast.d.puissance>attaque)cast.d.debuff_heros=attaque;else cast.d.debuff_heros=cast.d.puissance;
                                                cast.d.nombre=attaque-cast.d.debuff_heros;
                                                heros.attaque_modifiee=cast.d.nombre;
                                                cast.d.issue=cast.d.type+' '+cast.d.cible+_traduction.deux_points[_langue];
                                                cast.d.issue+=' -'+formate_puissance(cast.d.puissance)+' '+_traduction.attaque[_langue];
                                                cast.d.issue+=' ('+formate_puissance(attaque)+' => <strong>'+formate_puissance(cast.d.nombre)+'</strong>)';
                                                break;
                                            case 6:
                                                cast.d.cible=_traduction.heros_attaquant[_langue];
                                                cast.d.calcul=_unites_sorts[sort.unite][_langue];
                                                cast.d.debuff_heros=attaque*(cast.d.puissance/100);
                                                cast.d.nombre=attaque-cast.d.debuff_heros;
                                                cast.d.issue=cast.d.type+' '+cast.d.cible+_traduction.deux_points[_langue]+' '+formate_puissance(cast.d.nombre)+' '+_traduction.attaque[_langue]+' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue]+' -'+formate_nombre(cast.d.puissance,2)+cast.d.calcul+' '+_traduction.soit[_langue]+' -'+formate_puissance(cast.d.debuff_heros)+')';
                                                break;
                                            default:
                                                cast.d.issue=_traduction.erreur_calcul_sort_incoherent[_langue];
                                                break
                                        }
                                    }else{
                                        cast.d.issue=cast.d.type+_traduction.deux_points[_langue]+' '+_traduction.pas_de_heros_attaquant_cible[_langue]+'.'
                                    }
                                    break;
                                case 6:case 7:
                                    cast.d.issue=_traduction.alteration_defense_inutile[_langue];
                                    break;
                                case 0:case 1:case 2:case 3:case 4:case 8:case 9:
                                    cast.d.issue=_traduction.erreur_cible_sort_incompatible[_langue];
                                    break;
                                default:
                                    cast.d.issue=_traduction.erreur_cible_sort_inconnue[_langue];
                                    break
                            }
                            break;
                        case 0:
                            switch(sort.cible){
                                case 4:
                                    if(peloton_attaque>=0){
                                        if(peloton_attaquant!==undefined){
                                            cast.d.cible=_cibles_sorts[sort.cible][_langue];
                                            var degats=0;
                                            switch(sort.unite){
                                                case 1:
                                                    degats=cast.d.puissance*peloton_attaquant.nombre_restant;
                                                    cast.d.calcul=_unites_sorts[sort.unite][_langue]+' ['+formate_puissance(peloton_attaquant.nombre_restant)+']';
                                                    break;
                                                case 3:
                                                    var puissance_peloton=_unites[peloton_attaquant.type].puissance*peloton_attaquant.nombre_restant;
                                                    degats=(cast.d.puissance/100)*puissance_peloton;
                                                    cast.d.calcul=_unites_sorts[sort.unite][_langue]+' '+_traduction.de[_langue]+' '+formate_puissance(puissance_peloton);
                                                    break;
                                                case 7:
                                                    degats=cast.d.puissance;
                                                    cast.d.calcul=_unites_sorts[sort.unite][_langue];
                                                    break;
                                                default:
                                                    cast.d.issue=_traduction.erreur_calcul_sort_incoherent[_langue];
                                                    cast.d.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue]+' '+formate_puissance(cast.d.puissance)+')';
                                                    degats=null;
                                                    break
                                            }
                                            if(degats!==null){
                                                if(degats>(_unites[peloton_attaquant.type].puissance*peloton_attaquant.nombre_restant))degats=_unites[peloton_attaquant.type].puissance*peloton_attaquant.nombre_restant;
                                                var morts=Math.floor(degats/_unites[peloton_attaquant.type].puissance);
                                                peloton_attaquant.nombre_restant-=morts;
                                                peloton_attaquant.nombre_pertes_magie+=morts;
                                                cast.d.nombre=morts;
                                                cast.d.issue=cast.d.type+_traduction.deux_points[_langue];
                                                cast.d.issue+=' <strong>-'+formate_puissance(cast.d.nombre)+'</strong> '+image_html_troupe(peloton_attaquant.type,2);
                                                cast.d.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue];
                                                cast.d.issue+=' '+formate_nombre(cast.d.puissance,2)+cast.d.calcul;
                                                cast.d.issue+=((sort.unite!=7)?(', '+_traduction.soit[_langue]+' '+formate_puissance(degats)):'')+')'
                                            }
                                        }else{
                                            cast.d.issue=_traduction.erreur_peloton_indefini[_langue]
                                        }
                                    }else{
                                        cast.d.issue=cast.d.type+_traduction.deux_points[_langue]+' '+_traduction.pas_de_peloton_cible[_langue]+'.'
                                    }
                                    break;
                                case 3:
                                    cast.d.cible=_cibles_sorts[sort.cible][_langue];
                                    var massacre='';
                                    var puissance_massacree=0;
                                    for(var p=0;p<9;p++)if(pelotons_attaquant[p]!==undefined){
                                        var peloton=pelotons_attaquant[p];
                                        var pes=puissance_effective_sort(id_sort,'d',id_heros.defenseur,_unites[peloton.type].arme,arme_defense);
                                        cast.d.puissance=pes.puissance;
                                        if(cast.d.puissance!==null){
                                            var degats=0;
                                            switch(sort.unite){
                                                case 1:
                                                    degats=cast.d.puissance*peloton.nombre_restant;
                                                    cast.d.calcul=_unites_sorts[sort.unite][_langue];
                                                    break;
                                                case 3:
                                                    degats=(cast.d.puissance/100)*_unites[peloton.type].puissance*peloton.nombre_restant;
                                                    cast.d.calcul=_unites_sorts[sort.unite][_langue];
                                                    break;
                                                default:
                                                    cast.d.issue=_traduction.erreur_calcul_sort_incoherent[_langue];
                                                    cast.d.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue]+' '+formate_puissance(cast.d.puissance)+')';
                                                    degats=null;
                                                    break
                                            }
                                            if(degats!==null){
                                                if(degats>(_unites[peloton.type].puissance*peloton.nombre_restant))degats=(_unites[peloton.type].puissance*peloton.nombre_restant);
                                                var morts=Math.floor(degats/_unites[peloton.type].puissance);
                                                peloton.nombre_restant-=morts;
                                                peloton.nombre_pertes_magie+=morts;
                                                cast.d.nombre=morts;
                                                massacre+='-'+formate_puissance(cast.d.nombre)+' '+image_html_troupe(peloton.type,3)+' ';
                                                puissance_massacree+=morts*_unites[peloton.type].puissance
                                            }
                                        }else{
                                            cast.d.issue=_traduction.erreur_calcul_puissance_sort[_langue];
                                            break
                                        }
                                    }
                                    cast.d.issue=cast.d.type+' '+cast.d.cible+_traduction.deux_points[_langue];
                                    cast.d.issue+=' <strong>'+massacre+'</strong>';
                                    cast.d.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue];
                                    cast.d.issue+=' '+formate_nombre(cast.d.puissance,2)+cast.d.calcul;
                                    cast.d.issue+=' '+_traduction.soit[_langue]+' '+formate_nombre(puissance_massacree,0)+' '+_traduction.puissance[_langue]+' '+_traduction.eliminee[_langue]+')';
                                    break;
                                case 0:case 1:case 2:case 5:case 6:case 7:case 8:case 9:
                                    cast.a.issue=_traduction.erreur_cible_sort_incompatible[_langue];
                                    break;
                                default:
                                    cast.d.issue=_traduction.erreur_cible_sort_inconnue[_langue];
                                    break
                            }
                            break;
                        case 1:
                            var unite_invoquee=null;
                            if(sort.cible<3&&sort.cible>=0){
                                for(var u in _unites){
                                    if(_unites[u].faction==liste_heros[id_heros.defenseur].faction){
                                        if(_unites[u].arme==_cibles_sorts[sort.cible].arme){
                                            unite_invoquee=u;
                                            break
                                        }
                                    }
                                }
                            }else{
                                cast.d.issue=_traduction.erreur_cible_sort_incompatible[_langue];
                                cast.d.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue]+' '+formate_puissance(cast.d.puissance)+')';
                                break
                            }
                            if(unite_invoquee!==null){
                                cast.d.cible=_unites[unite_invoquee].nom[_langue];
                                var puissance_invoquee=0;
                                switch(sort.unite){
                                    case 0:
                                        puissance_invoquee=cast.d.puissance;
                                        break;
                                    case 4:
                                        var puissance_armee_adverse=0;
                                        for(var p in pelotons_attaquant){
                                            if(p>=2){
                                                puissance_armee_adverse+=_unites[pelotons_attaquant[p].type].puissance*pelotons_attaquant[p].nombre
                                            }
                                        }
                                        cast.d.calcul=formate_nombre(cast.d.puissance,2)+_unites_sorts[sort.unite][_langue]+' ['+formate_puissance(puissance_armee_adverse)+'], '+_traduction.soit[_langue]+' ';
                                        puissance_invoquee=Math.floor((cast.d.puissance/100)*puissance_armee_adverse);
                                        break;
                                    default:
                                        cast.d.issue=_traduction.erreur_calcul_sort_incoherent[_langue];
                                        cast.d.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue]+' '+formate_puissance(cast.d.puissance)+')';
                                        puissance_invoquee=null;
                                        break
                                }
                                if(puissance_invoquee!==null){
                                    cast.d.nombre=Math.floor(puissance_invoquee/_unites[unite_invoquee].puissance);
                                    var p=1;
                                    if(pelotons_defenseur[p]!==undefined)p=0;
                                    pelotons_defenseur[p]={
                                        type:unite_invoquee,
                                        nombre:cast.d.nombre,
                                        nombre_debut_tour:cast.d.nombre,
                                        nombre_debut_combat:cast.d.nombre,
                                        nombre_restant:cast.d.nombre,
                                        nombre_pertes:0,
                                        nombre_pertes_magie:0,
                                        nombre_bonus:0,
                                        nombre_bonus_perdu:0
                                    };

                                    peloton_defense=p;
                                    cast.d.issue=cast.d.type+image_html_arme(_cibles_sorts[sort.cible].arme,0)+_traduction.deux_points[_langue];
                                    cast.d.issue+=' <strong>'+formate_puissance(cast.d.nombre)+'</strong> '+image_html_troupe(unite_invoquee,2);
                                    cast.d.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue];
                                    cast.d.issue+=' '+cast.d.calcul+formate_puissance(puissance_invoquee)+')'
                                }
                            }else{
                                cast.d.issue=_traduction.erreur_pas_d_unite_invocable[_langue];
                                cast.d.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue]+' '+cast.d.puissance+')';
                                cast.d.nombre=0
                            }
                            break;
                        case 2:
                            avertissement(_traduction.alerte_resurrection[_langue]);
                            if(sort.cible==8||sort.cible==9){
                                cast.d.rez_peloton=peloton_defense;
                                if(sort.cible==8){
                                    cast.d.rez='tmp'
                                }else{
                                    cast.d.rez='def'
                                }
                                if(sort.unite==2){
                                    cast.d.calcul=_unites_sorts[sort.unite][_langue]
                                }
                                else{
                                    cast.d.issue=_traduction.erreur_calcul_sort_incoherent[_langue];
                                    cast.d.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue]+' '+formate_puissance(cast.d.puissance)+')'
                                }
                            }else{
                                cast.a.issue=_traduction.erreur_cible_sort_incompatible[_langue]
                            }
                            break;
                        default:
                            cast.d.issue=_traduction.erreur_type_sort_inconnu[_langue];
                            break
                    }
                }
                else{
                    cast.d.issue=_traduction.erreur_calcul_puissance_sort[_langue]
                }
            }
            return cast
        }
    }

    {
        function bonus_attaque_defense(heros_a,heros_d,arme_attaque,arme_defense){
            heros_a=liste_heros[heros_a];
            heros_d=liste_heros[heros_d];
            var bonus={
                attaque_unites_heros:0,
                attaque_peloton_heros:0,
                attaque_peloton_arme:0,
                attaque_peloton_special:0,
                defense_unites_heros:0,
                defense_peloton_heros:0,
                defense_peloton_arme:0,
                defense_peloton_fortifications:0,
                defense_peloton_special:0
            };

            if((arme_attaque=='I'&&arme_defense=='C')||(arme_attaque=='R'&&arme_defense=='I')||(arme_attaque=='C'&&arme_defense=='R')){
                bonus_arme=1
            }
            if((arme_defense=='I'&&arme_attaque=='C')||(arme_defense=='R'&&arme_attaque=='I')||(arme_defense=='C'&&arme_attaque=='R')){
                bonus_arme=-1
            }
            if(heros_a!==undefined){
                if(heros_a.bonus_harangueur!==undefined)bonus.attaque_unites_heros+=heros_a.bonus_harangueur;
                if(arme_attaque=='I'&&heros_a.bonus_aui!==undefined)bonus.attaque_unites_heros+=heros_a.bonus_aui;
                if(arme_attaque=='R'&&heros_a.bonus_aur!==undefined)bonus.attaque_unites_heros+=heros_a.bonus_aur;
                if(arme_attaque=='C'&&heros_a.bonus_auc!==undefined)bonus.attaque_unites_heros+=heros_a.bonus_auc;
                if(heros_a.bonus_legendary_sovereign_a!==undefined)bonus.attaque_unites_heros+=heros_a.bonus_legendary_sovereign_a;
            }
            if(heros_a!==undefined){
                bonus.attaque_peloton_heros+=heros_a.attaque_modifiee*0.005;
                if(heros_a.bonus_tacticien!==undefined)bonus.attaque_peloton_heros+=heros_a.bonus_tacticien/100;
                if(arme_attaque=='I'&&heros_a.bonus_commandant_infanterie!==undefined&&(arme_defense=='C'))bonus.attaque_peloton_heros+=heros_a.bonus_commandant_infanterie/100;
                if(arme_attaque=='R'&&heros_a.bonus_tireur_elite!==undefined&&(arme_defense=='I'))bonus.attaque_peloton_heros+=heros_a.bonus_tireur_elite/100;
                if(arme_attaque=='C'&&heros_a.bonus_ecuyer!==undefined&&(arme_defense=='R'))bonus.attaque_peloton_heros+=heros_a.bonus_ecuyer/100;
                if(moral_eleve.attaquant!==undefined)bonus.attaque_peloton_heros+=moral_eleve.attaquant/100
            }
            if(competences_speciales.attaquant.pieges>0){
                bonus.attaque_peloton_special+=_competences_speciales.pieges.bonus*competences_speciales.attaquant.pieges/100
            }
            if(bonus_arme==1){
                bonus.attaque_peloton_arme+=_facteur_bonus
            }
            if(heros_d!==undefined){
                if(heros_d.bonus_bon_payeur!==undefined)bonus.defense_unites_heros+=heros_d.bonus_bon_payeur;
                if(heros_d.bonus_du!==undefined)bonus.defense_unites_heros+=heros_d.bonus_du;
                if(arme_defense=='I'&&heros_d.bonus_dui!==undefined)bonus.defense_unites_heros+=heros_d.bonus_dui
            }
            if(heros_d!==undefined) {
                bonus.defense_peloton_heros+=heros_d.defense_modifiee*0.005;
                if(heros_d.bonus_tacticien_defenseur!==undefined)bonus.defense_peloton_heros+=(heros_d.bonus_tacticien_defenseur/100);
                if(arme_defense=='I'&&heros_d.bonus_inebranlable!==undefined&&(arme_attaque=='C'))bonus.defense_peloton_heros+=(heros_d.bonus_inebranlable/100);
                if(arme_defense=='R'&&heros_d.bonus_expert_tirs_barrage!==undefined&&(arme_attaque=='I'))bonus.defense_peloton_heros+=(heros_d.bonus_expert_tirs_barrage/100);
                if(arme_defense=='C'&&heros_d.bonus_ecuyer_defenseur!==undefined&&(arme_attaque=='R'))bonus.defense_peloton_heros+=(heros_d.bonus_ecuyer_defenseur/100);
                if(heros_a!==undefined) {
                    if(heros_a.bonus_legendary_legwarrior_b!==undefined)bonus.defense_peloton_heros+=heros_d.bonus_legendary_legwarrior_b/100;
                    if(heros_a.bonus_legendary_legwarrior_b!==undefined)bonus.defense_peloton_heros+=heros_d.bonus_legendary_legwarrior_b/100;
                }
                if(moral_eleve.defenseur!==undefined)bonus.defense_peloton_heros+=moral_eleve.defenseur/100;
            }
            if(competences_speciales.defenseur.pieges>0){
                bonus.defense_peloton_special+=_competences_speciales.pieges.bonus*competences_speciales.defenseur.pieges/100
            }
            if(bonus_arme==-1){
                bonus.defense_peloton_arme+=_facteur_bonus
            }
            var bonus_fortifications=0;
            if(lieu==1)bonus_fortifications+=(bonus_defense_cite/100);
            if(lieu==2)bonus_fortifications+=(bonus_defense_region/100);
            if(lieu==1){
                bonus_fortifications+=(bonus_larmes_defense/100);
                if(bonus_larmes_defense>0)avertissement(_traduction.alerte_defense_graals[_langue])
            }
            if(heros_d!==undefined&&heros_d.bonus_batisseur_fortifications!==undefined&&heros_d.bonus_batisseur_fortifications>0&&(lieu==1||lieu==2)){
                avertissement(_traduction.alerte_batisseur_fortifications[_langue].replace(/X/,heros_d.bonus_batisseur_fortifications));
                bonus_fortifications+=(heros_d.bonus_batisseur_fortifications/100)
            }
            if(heros_a!==undefined) {
                if (heros_a.bonus_sapeur!==undefined&&heros_a.bonus_sapeur>0&&(lieu==1||lieu==2)) {
                    avertissement(_traduction.alerte_sapeur[_langue].replace(/X/,heros_a.bonus_sapeur));
                    bonus_fortifications-=(heros_a.bonus_sapeur/100)
                }
                if (heros_a.bonus_legendary_legwarrior_c!==undefined&&heros_a.bonus_legendary_legwarrior_c>0&&(lieu==1||lieu==2)) {
                    bonus_fortifications-=(heros_a.bonus_legendary_legwarrior_c/100)
                }
                if (heros_a.bonus_legendary_ethernalnight_b!==undefined&&heros_a.bonus_legendary_ethernalnight_b>0&&(lieu==1||lieu==2)) {
                    bonus_fortifications-=(heros_a.bonus_legendary_ethernalnight_b/100)
                }
            }
            if(bonus_fortifications<0)bonus_fortifications=0;
            bonus.defense_peloton_fortifications+=bonus_fortifications;
            return bonus
        }

        function simulation_combat(tour){
            var resultat={};
            bonus_arme=0;
            var peloton_attaquant=pelotons_attaquant[peloton_attaque];
            var peloton_defenseur=pelotons_defenseur[peloton_defense];
            var puissance_attaque_base=_unites[peloton_attaquant.type].puissance*peloton_attaquant.nombre_debut_combat;
            var puissance_defense_base=_unites[peloton_defenseur.type].puissance*peloton_defenseur.nombre_debut_combat;
            resultat.puissance_attaque_base=puissance_attaque_base;
            resultat.puissance_defense_base=puissance_defense_base;
            var arme_attaque=_unites[peloton_attaquant.type].arme;
            var arme_defense=_unites[peloton_defenseur.type].arme;
            var bonus=bonus_attaque_defense(id_heros.attaquant,id_heros.defenseur,arme_attaque,arme_defense);
            resultat.puissance_attaque_bonus_heros=puissance_attaque_base*bonus.attaque_peloton_heros+peloton_attaquant.nombre_debut_combat*bonus.attaque_unites_heros;
            resultat.puissance_attaque_bonus_arme=puissance_attaque_base*bonus.attaque_peloton_arme;
            resultat.puissance_attaque_bonus_special=puissance_attaque_base*bonus.attaque_peloton_special;
            var puissance_attaque_bonus=resultat.puissance_attaque_bonus_heros+resultat.puissance_attaque_bonus_arme+resultat.puissance_attaque_bonus_special;
            resultat.puissance_defense_bonus_heros=puissance_defense_base*bonus.defense_peloton_heros+peloton_defenseur.nombre_debut_combat*bonus.defense_unites_heros;
            resultat.puissance_defense_bonus_arme=puissance_defense_base*bonus.defense_peloton_arme;
            resultat.puissance_defense_bonus_special=puissance_defense_base*bonus.defense_peloton_special;
            resultat.puissance_defense_bonus_fortifications=puissance_defense_base*bonus.defense_peloton_fortifications;
            var puissance_defense_bonus=resultat.puissance_defense_bonus_heros+resultat.puissance_defense_bonus_arme+resultat.puissance_defense_bonus_special+resultat.puissance_defense_bonus_fortifications;
            resultat.bonus_arme=bonus_arme;
            var puissance_attaque_totale=puissance_attaque_base+puissance_attaque_bonus;
            var puissance_defense_totale=puissance_defense_base+puissance_defense_bonus;
            resultat.puissance_attaque_totale=puissance_attaque_totale;
            resultat.puissance_defense_totale=puissance_defense_totale;
            resultat.faux_nul=0;
            resultat.nul=false;
            if (puissance_attaque_totale > puissance_defense_totale) {
                resultat.pertes_defenseur = peloton_defenseur.nombre_debut_combat;
                peloton_defenseur.nombre_restant = 0;
                peloton_defenseur.disperse = true;
                if (resultat.pertes_defenseur > 0) {
                    peloton_defenseur.nombre_bonus_perdu += Math.min((peloton_defenseur.nombre_bonus - peloton_defenseur.nombre_bonus_perdu),resultat.pertes_defenseur)
                }
                var delta_puissance_totale = Math.floor(puissance_attaque_totale) - Math.floor(puissance_defense_totale);
                if (delta_puissance_totale > puissance_attaque_base) {
                    resultat.pertes_attaquant =-1;
                    peloton_attaquant.nombre_restant = peloton_attaquant.nombre_debut_combat;
                } else {
                    resultat.pertes_attaquant = Math.floor((Math.floor(puissance_defense_totale) - Math.floor(puissance_attaque_bonus))/_unites[peloton_attaquant.type].puissance);
                    peloton_attaquant.nombre_restant -= resultat.pertes_attaquant;
                    if(peloton_attaquant.nombre_restant === 0){
                        resultat.faux_nul = 1;
                        dernier_peloton = peloton_attaque
                    }
                    if(resultat.pertes_attaquant > 0) {
                        peloton_attaquant.nombre_bonus_perdu += Math.min((peloton_attaquant.nombre_bonus - peloton_attaquant.nombre_bonus_perdu),resultat.pertes_attaquant);
                    }
                }
            } else {
                resultat.pertes_attaquant = peloton_attaquant.nombre_debut_combat;
                peloton_attaquant.nombre_restant = 0;
                peloton_attaquant.disperse = true;
                if (resultat.pertes_attaquant > 0) {
                    peloton_attaquant.nombre_bonus_perdu+=Math.min((peloton_attaquant.nombre_bonus-peloton_attaquant.nombre_bonus_perdu),resultat.pertes_attaquant)
                }
                var delta_puissance_totale=Math.floor(puissance_defense_totale)-Math.floor(puissance_attaque_totale);
                if(delta_puissance_totale>puissance_defense_base){
                    resultat.pertes_defenseur=-1;
                    peloton_defenseur.nombre_restant=peloton_defenseur.nombre_debut_combat
                }else{
                    resultat.pertes_defenseur=Math.floor((Math.floor(puissance_attaque_totale)-Math.floor(puissance_defense_bonus))/_unites[peloton_defenseur.type].puissance);
                    if(delta_puissance_totale>0){
                        peloton_defenseur.nombre_restant-=resultat.pertes_defenseur;
                        if(peloton_defenseur.nombre_restant===0){
                            resultat.faux_nul=-1;
                            dernier_peloton=peloton_defense
                        }
                    }else{
                        avertissement(_traduction.alerte_egalite[_langue].replace(/X/,tour));
                        resultat.pertes_defenseur=peloton_defenseur.nombre_debut_combat;
                        peloton_defenseur.nombre_restant=0;
                        peloton_defenseur.disperse=true;
                        resultat.nul=true
                    }
                    if(resultat.pertes_defenseur>0){
                        peloton_defenseur.nombre_bonus_perdu+=Math.min((peloton_defenseur.nombre_bonus-peloton_defenseur.nombre_bonus_perdu),resultat.pertes_defenseur)
                    }
                }
            }
            return resultat;
        }

        function equilibrage_representation_fractions(fractions,total,representation,representation_total){
            var frac=[];
            var total_arrondis=0;
            for(var i in fractions){
                var temp=((fractions[i]/total)*representation_total);
                frac[i]={
                    valeur:fractions[i],
                    arrondi:Math.round(temp),
                    delta:(Math.round(temp)-temp)
                };

                total_arrondis+=frac[i].arrondi
            }
            if(total_arrondis<representation){
                for(var x=representation-total_arrondis;x>0;x--){
                    var max={
                        valeur:0,
                        id:null
                    };

                    for(var f in frac){
                        if(frac[f].delta<max.valeur){
                            max.valeur=frac[f].delta;
                            max.id=f
                        }
                    }
                    if(max.id!==null)frac[max.id].arrondi++
                }
            }else if(total_arrondis>representation){
                for(var x=total_arrondis-representation;x>0;x--){
                    var max={
                        valeur:0,
                        id:null
                    };

                    for(var f in frac){
                        if(frac[f].delta>max.valeur){
                            max.valeur=frac[f].delta;
                            max.id=f
                        }
                    }
                    if(max.id!==null)frac[max.id].arrondi--
                }
            }
            return frac
        }
        function rapport_de_forces(donnees){
            var largeur=100;
            var hauteur=6;
            var attaque_totale=donnees.puissance_attaque_totale;
            var defense_totale=donnees.puissance_defense_totale;
            if(attaque_totale>defense_totale)var maximum=attaque_totale;else var maximum=defense_totale;
            var largeur_attaque=Math.round((attaque_totale/maximum)*largeur);
            var largeur_defense=Math.round((defense_totale/maximum)*largeur);
            var barres=equilibrage_representation_fractions([donnees.puissance_attaque_base,donnees.puissance_attaque_bonus_arme,donnees.puissance_attaque_bonus_heros,donnees.puissance_attaque_bonus_special],maximum,largeur_attaque,largeur);
            var html='<div class="barre attaquant'+(detail_combats?'':' cache')+'" style="line-height:'+hauteur+'px;height:'+hauteur+'px;width:'+largeur+'px;">';
            html+='<span class="barre base" title="'+_traduction.base[_langue]+' = '+formate_nombre_tooltip(barres[0].valeur)+'" style="height:'+hauteur+'px;width:'+barres[0].arrondi+'px;"></span>';
            html+='<span class="barre arme" title="'+_traduction.bonus[_langue]+' '+_traduction.arme[_langue]+' = '+formate_nombre_tooltip(barres[1].valeur)+'" style="height:'+hauteur+'px;width:'+barres[1].arrondi+'px;"></span>';
            html+='<span class="barre heros" title="'+_traduction.bonus[_langue]+' '+_traduction.attaque[_langue]+' '+_traduction.heros[_langue]+' = '+formate_nombre_tooltip(barres[2].valeur)+'" style="height:'+hauteur+'px;width:'+barres[2].arrondi+'px;"></span>';
            html+='<span class="barre special-pieges" title="'+_competences_speciales.pieges.nom[_langue]+' = '+formate_nombre_tooltip(barres[3].valeur)+'" style="height:'+hauteur+'px;width:'+barres[3].arrondi+'px;"></span>';
            html+='</div>';
            var barres=equilibrage_representation_fractions([donnees.puissance_defense_base,donnees.puissance_defense_bonus_arme,donnees.puissance_defense_bonus_heros,donnees.puissance_defense_bonus_special,donnees.puissance_defense_bonus_fortifications],maximum,largeur_defense,largeur);
            html+='<div class="barre defenseur'+(detail_combats?'':' cache')+'" style="line-height:'+hauteur+'px;height:'+hauteur+'px;width:'+largeur+'px;">';
            html+='<span class="barre base" title="'+_traduction.base[_langue]+' = '+formate_nombre_tooltip(barres[0].valeur)+'" style="height:'+hauteur+'px;width:'+barres[0].arrondi+'px;"></span>';
            html+='<span class="barre arme" title="'+_traduction.bonus[_langue]+' '+_traduction.arme[_langue]+' = '+formate_nombre_tooltip(barres[1].valeur)+'" style="height:'+hauteur+'px;width:'+barres[1].arrondi+'px;"></span>';
            html+='<span class="barre heros" title="'+_traduction.bonus[_langue]+' '+_traduction.defense[_langue]+' '+_traduction.heros[_langue]+' = '+formate_nombre_tooltip(barres[2].valeur)+'" style="height:'+hauteur+'px;width:'+barres[2].arrondi+'px;"></span>';
            html+='<span class="barre special-pieges" title="'+_competences_speciales.pieges.nom[_langue]+' = '+formate_nombre_tooltip(barres[3].valeur)+'" style="height:'+hauteur+'px;width:'+barres[3].arrondi+'px;"></span>';
            html+='<span class="barre fortifications" title="'+_traduction.bonus[_langue]+' '+_traduction.fortification[_langue]+' = '+formate_nombre_tooltip(barres[4].valeur)+'" style="height:'+hauteur+'px;width:'+barres[4].arrondi+'px;"></span>';
            html+='</div>';
            return html
        }
    }

    {
        function tri_decroissant(a,b){
            return b-a
        }
        function plus_puissant_peloton(ordre,camp){
            var pelotons=[];
            for(var i=2;i<9;i++){
                pelotons[i]=0;
                if(camp=='a'&&pelotons_attaquant[i]!==undefined)pelotons[i]=pelotons_attaquant[i].nombre_restant*_unites[pelotons_attaquant[i].type].puissance;
                if(camp=='d'&&pelotons_defenseur[i]!==undefined)pelotons[i]=pelotons_defenseur[i].nombre_restant*_unites[pelotons_defenseur[i].type].puissance
            }
            pelotons.sort(tri_decroissant);
            return pelotons[ordre-1]
        }
        function pelotons_faction_unique(camp){
            if(camp=='a')var pelotons=pelotons_attaquant;
            if(camp=='d')var pelotons=pelotons_defenseur;
            // var faction=_unites[pelotons[2].type].faction;
            for(var i=2;i<9;i++){
                if(pelotons[''+i] !== undefined)
                {
                    var faction=_unites[pelotons[''+i].type].faction;
                }
            }
            for(var i=2;i<9;i++){
                if(pelotons[i]===undefined)continue;
                if(_unites[pelotons[i].type].faction!=faction)return false
            }
            return true
        }
        function tiny_url() {
            var tiny_url = '';
            p = get.indexOf('info=');
            if (p != -1 && get.substr((p+5), 200) != '') {
                $.getJSON(
                    'scripts/ajax.html',
                    {
                        cat : 'tinyurl',
                        action : 'getC',
                        url : document.URL
                    },
                    function(data) {
                        tiny_url = '';
                        if (typeof data.returnData != 'undefined' && data.returnData != '') {
                            var urlA = document.URL.split(_traduction.combat[_langue]);
                            tiny_url = '<u>' + urlA['0'] + 'u/' + data.returnData + '</ul>';
                            $('#lien-permanent_tiny').html('&nbsp;TinyUrl =&nbsp;');
                            $('#lien-permanent_tiny_text').html(tiny_url);
                        }
                    }
                );
            }
        }
        function selectText(element) {
            var doc = document;
            var text = doc.getElementById(element);

            if (doc.body.createTextRange) { // ms
                var range = doc.body.createTextRange();
                range.moveToElementText(text);
                range.select();
            } else if (window.getSelection) { // moz, opera, webkit
                var selection = window.getSelection();
                var range = doc.createRange();
                range.selectNodeContents(text);
                selection.removeAllRanges();
                selection.addRange(range);
            }
        }
        function simulation_rencontre(){
            var heros_a = liste_heros[id_heros.attaquant];
            var heros_d = liste_heros[id_heros.defenseur];
            var permHtml = '<input type="submit" value="'+_traduction.bouton_permalien[_langue]+'" />';
            $('#lien-permanent').html(permHtml);
            $('#lien-permanent input').click(function() {
                var urlFull = permalien_combat();
                var urlB = urlFull.split('"');
                var urlA = document.URL.split("?");
                var url = urlA['0'] + urlB['1'];
                $('#lien-permanent').html(urlFull);
                tinyUrlSubmit(url);
            });
            $('#lien-permanent_tiny_text').dblclick(function() {
                selectText('lien-permanent_tiny_text');
            });
            efface_simulation();
            $('#combat').removeClass('cache');
            if(pelotons_defense_reordonnes)avertissement(_traduction.alerte_ordre_pelotons_defense[_langue]);
            var puissance_armee_attaque=0;
            var puissance_armee_defense=0;
            for(var i=2;i<9;i++){
                if(pelotons_attaquant[i]!==undefined){
                    puissance_armee_attaque+=pelotons_attaquant[i].nombre*_unites[pelotons_attaquant[i].type].puissance
                }
                if(pelotons_defenseur[i]!==undefined){
                    puissance_armee_defense+=pelotons_defenseur[i].nombre*_unites[pelotons_defenseur[i].type].puissance
                }
            }
            if(!rencontre_jcj){
                if((puissance_armee_attaque/puissance_armee_defense)<=_seuil_fuite_jce){
                    var html='<th><span class="cap">'+_traduction.fin[_langue]+'</span></th>';
                    html+='<td></td><td></td><td></td><td></td><td></td>';
                    html+='<td>'+_traduction.attaquant_fuite[_langue]+'</td>';
                    html+='<td></td><td></td><td></td><td></td><td></td>';
                    html+='<th><span class="cap">'+_traduction.fin[_langue]+'</span></th>';
                    $('#combat tbody').append('<tr>'+html+'</tr>');
                    return true
                }
            }
            if(rencontre_jcj){
                var rapport=Math.floor((puissance_armee_attaque/puissance_armee_defense)*30);
                var message='';
                if(rapport<=2)message=_traduction.attaquant_capture[_langue];
                if((rapport>2)&&(rapport<=3))message=_traduction.attaquant_blesse[_langue].replace(/X/,24);
                if((rapport>3&&rapport<=4))message=_traduction.attaquant_blesse[_langue].replace(/X/,18);
                if((rapport>4&&rapport<=5))message=_traduction.attaquant_blesse[_langue].replace(/X/,12);
                if((rapport>5&&rapport<=6))message=_traduction.attaquant_blesse[_langue].replace(/X/,6);
                if((rapport>6&&rapport<=7))message=_traduction.attaquant_fuite[_langue];
                if(rapport<=7){
                    var html='<th><span class="cap">'+_traduction.fin[_langue]+'</span></th>';
                    html+='<td></td><td></td><td></td><td></td><td></td>';
                    html+='<td>'+message+'</td>';
                    html+='<td></td><td></td><td></td><td></td><td></td>';
                    html+='<th><span class="cap">'+_traduction.fin[_langue]+'</span></th>';
                    $('#combat tbody').append('<tr>'+html+'</tr>');
                    return true
                }
            }
            if(competences_hereditaires.attaquant.moral_eleve>0&&id_heros.attaquant!==null){
                var bonus=_competences_hereditaires.moral_eleve.bonus[competences_hereditaires.attaquant.moral_eleve];
                bonus*=1+(_multiplicateur_voie*_classement_voies[classement_voies.attaquant][_competences_hereditaires.moral_eleve.voie]);
                bonus*=(plus_puissant_peloton(2,'a')/plus_puissant_peloton(1,'a'));
                if(pelotons_faction_unique('a'))moral_eleve.attaquant=bonus;else moral_eleve.attaquant=0;
                $('#combat tbody').append('<tr class="moral-eleve attaquant"><td colspan="13">'+_competences_hereditaires.moral_eleve.nom[_langue]+_traduction.deux_points[_langue]+' +'+formate_nombre(moral_eleve.attaquant,2)+_traduction.pourcent[_langue]+'</td></tr>')
            }else moral_eleve.attaquant=0;
            if(competences_hereditaires.defenseur.moral_eleve>0&&id_heros.defenseur!==null){
                var bonus=_competences_hereditaires.moral_eleve.bonus[competences_hereditaires.defenseur.moral_eleve];
                bonus*=1+(_multiplicateur_voie*_classement_voies[classement_voies.defenseur][_competences_hereditaires.moral_eleve.voie]);
                bonus*=(plus_puissant_peloton(2,'d')/plus_puissant_peloton(1,'d'));
                if(pelotons_faction_unique('d'))moral_eleve.defenseur=bonus;else moral_eleve.defenseur=0;
                $('#combat tbody').append('<tr class="moral-eleve defenseur"><td colspan="13">'+_competences_hereditaires.moral_eleve.nom[_langue]+_traduction.deux_points[_langue]+' +'+formate_nombre(moral_eleve.defenseur,2)+_traduction.pourcent[_langue]+'</td></tr>')
            }else moral_eleve.defenseur=0;
            if(competences_hereditaires.attaquant.resistance_magique>0&&id_heros.attaquant!==null){
                var bonus=_competences_hereditaires.resistance_magique.bonus[competences_hereditaires.attaquant.resistance_magique];
                bonus*=1+(_multiplicateur_voie*_classement_voies[classement_voies.attaquant][_competences_hereditaires.resistance_magique.voie]);
                $('#combat tbody').append('<tr class="resistance-magique attaquant"><td colspan="13">'+_competences_hereditaires.resistance_magique.nom[_langue]+_traduction.deux_points[_langue]+' +'+formate_nombre(bonus,2)+_traduction.pourcent[_langue]+'</td></tr>')
            }
            if(competences_hereditaires.defenseur.resistance_magique>0&&id_heros.defenseur!==null){
                var bonus=_competences_hereditaires.resistance_magique.bonus[competences_hereditaires.defenseur.resistance_magique];
                bonus*=1+(_multiplicateur_voie*_classement_voies[classement_voies.defenseur][_competences_hereditaires.resistance_magique.voie]);
                $('#combat tbody').append('<tr class="resistance-magique defenseur"><td colspan="13">'+_competences_hereditaires.resistance_magique.nom[_langue]+_traduction.deux_points[_langue]+' +'+formate_nombre(bonus,2)+_traduction.pourcent[_langue]+'</td></tr>')
            }
            if(competences_speciales.attaquant.antimagie>0){
                var bonus=_competences_speciales.antimagie.bonus*competences_speciales.attaquant.antimagie;
                $('#combat tbody').append('<tr class="special-antimagie attaquant"><td colspan="13">'+toCapitalCase(_competences_speciales.antimagie.nom[_langue])+_traduction.deux_points[_langue]+' +'+formate_nombre(bonus,2)+_traduction.pourcent[_langue]+'</td></tr>')
            }
            if(competences_speciales.defenseur.antimagie>0){
                var bonus=_competences_speciales.antimagie.bonus*competences_speciales.defenseur.antimagie;
                $('#combat tbody').append('<tr class="special-antimagie defenseur"><td colspan="13">'+toCapitalCase(_competences_speciales.antimagie.nom[_langue])+_traduction.deux_points[_langue]+' +'+formate_nombre(bonus,2)+_traduction.pourcent[_langue]+'</td></tr>')
            }
            if(competences_speciales.attaquant.pieges>0){
                var bonus=_competences_speciales.pieges.bonus*competences_speciales.attaquant.pieges;
                $('#combat tbody').append('<tr class="special-pieges attaquant"><td colspan="13">'+toCapitalCase(_competences_speciales.pieges.nom[_langue])+_traduction.deux_points[_langue]+' +'+formate_nombre(bonus,2)+_traduction.pourcent[_langue]+'</td></tr>')
            }
            if(competences_speciales.defenseur.pieges>0){
                var bonus=_competences_speciales.pieges.bonus*competences_speciales.defenseur.pieges;
                $('#combat tbody').append('<tr class="special-pieges defenseur"><td colspan="13">'+toCapitalCase(_competences_speciales.pieges.nom[_langue])+_traduction.deux_points[_langue]+' +'+formate_nombre(bonus,2)+_traduction.pourcent[_langue]+'</td></tr>')
            }
            function tir_engins_siege(nom_tir,modificateur_tir,unites_tirant,pelotons_tireur,pelotons_cible,pertes_cible){
                var puissance_tir=0;
                for(var p=2;p<9;p++)if(pelotons_tireur[p]!==undefined&&(unites_tirant!='R'||_unites[pelotons_tireur[p].type].arme=='R')&&(unites_tirant!='E'||_unites[pelotons_tireur[p].type].siege!==undefined)){
                    if(unites_tirant=='E')var puissance_tireur=(_unites[pelotons_tireur[p].type].puissance==300)?1100:1600;else var puissance_tireur=_unites[pelotons_tireur[p].type].puissance;
                    puissance_tir+=puissance_tireur*pelotons_tireur[p].nombre_restant
                }
                puissance_tir*=(modificateur_tir/100);
                if(puissance_tir==0){
                    if(unites_tirant=='E')return false;
                    var message=nom_tir+' '+_traduction.sans_effet[_langue]
                }else{
                    var effet=puissance_tir;
                    p=2;
                    var massacre='';
                    while(puissance_tir>0&&p<9){
                        if(pelotons_cible[p]!==undefined){
                            var puissance_unitaire=_unites[pelotons_cible[p].type].puissance;
                            var puissance_defense=puissance_unitaire*pelotons_cible[p].nombre_restant;
                            if(pertes_cible[p]===undefined)pertes_cible[p]=0;
                            if(puissance_tir<=puissance_defense){
                                pertes_cible[p]+=Math.floor(puissance_tir/puissance_unitaire);
                                puissance_tir=0
                            }else{
                                pertes_cible[p]+=pelotons_cible[p].nombre_restant;
                                puissance_tir-=puissance_defense
                            }
                            massacre+='-'+formate_puissance(pertes_cible[p])+' '+image_html_troupe(pelotons_cible[p].type,3)+' '
                        }
                        p++
                    }
                    var message=nom_tir+' ('+formate_puissance(effet)+')'+_traduction.deux_points[_langue]+' <span class="petit">'+massacre+'</span>'
                }
                return message
            };

            var pertes_attaquant=[];
            var pertes_defenseur=[];
            if(competences_hereditaires.attaquant.tir_de_barrage>0&&id_heros.attaquant!==null){
                var bonus=_competences_hereditaires.tir_de_barrage.bonus[competences_hereditaires.attaquant.tir_de_barrage];
                bonus*=1+(_multiplicateur_voie*_classement_voies[classement_voies.attaquant][_competences_hereditaires.tir_de_barrage.voie]);
                var message=tir_engins_siege(_competences_hereditaires.tir_de_barrage.nom[_langue],bonus,'R',pelotons_attaquant,pelotons_defenseur,pertes_defenseur);
                $('#combat tbody').append('<tr class="tir-de-barrage attaquant"><td colspan="13">'+message+'</td></tr>')
            }
            if(competences_hereditaires.defenseur.tir_de_barrage>0&&id_heros.defenseur!==null){
                var bonus=_competences_hereditaires.tir_de_barrage.bonus[competences_hereditaires.defenseur.tir_de_barrage];
                bonus*=1+(_multiplicateur_voie*_classement_voies[classement_voies.defenseur][_competences_hereditaires.tir_de_barrage.voie]);
                var message=tir_engins_siege(_competences_hereditaires.tir_de_barrage.nom[_langue],bonus,'R',pelotons_defenseur,pelotons_attaquant,pertes_attaquant);
                $('#combat tbody').append('<tr class="tir-de-barrage defenseur"><td colspan="13">'+message+'</td></tr>')
            }
            if(competences_speciales.attaquant.baliste>0){
                var bonus=_competences_speciales.baliste.bonus*competences_speciales.attaquant.baliste;
                var message=tir_engins_siege(toCapitalCase(_competences_speciales.baliste.nom[_langue]),bonus,'T',pelotons_attaquant,pelotons_defenseur,pertes_defenseur);
                $('#combat tbody').append('<tr class="special-baliste attaquant"><td colspan="13">'+message+'</td></tr>')
            }
            if(competences_speciales.defenseur.baliste>0){
                var bonus=_competences_speciales.baliste.bonus*competences_speciales.defenseur.baliste;
                var message=tir_engins_siege(toCapitalCase(_competences_speciales.baliste.nom[_langue]),bonus,'T',pelotons_defenseur,pelotons_attaquant,pertes_attaquant);
                $('#combat tbody').append('<tr class="special-baliste defenseur"><td colspan="13">'+message+'</td></tr>')
            }
            if(saison>1&&lieu==3&&id_heros.defenseur!==null){
                var message=tir_engins_siege(toCapitalCase(_traduction.bombardement[_langue]),100,'E',pelotons_defenseur,pelotons_attaquant,pertes_attaquant);
                if(message)$('#combat tbody').append('<tr class="bombardement defenseur"><td colspan="13">'+message+'</td></tr>')
            }
            for(var p=2;p<9;p++){
                if(pelotons_attaquant[p]!==undefined&&pertes_attaquant[p]!==undefined){
                    pelotons_attaquant[p].nombre_pertes+=pertes_attaquant[p];
                    pelotons_attaquant[p].nombre_restant-=pertes_attaquant[p]
                }
                if(pelotons_defenseur[p]!==undefined&&pertes_defenseur[p]!==undefined){
                    pelotons_defenseur[p].nombre_pertes+=pertes_defenseur[p];
                    pelotons_defenseur[p].nombre_restant-=pertes_defenseur[p]
                }
            }
            var impair=true;
            var tour=1;
            var combat_effectif=0;
            peloton_attaque=0;
            peloton_defense=0;

            while(peloton_attaque>=0&&peloton_defense>=0){
                peloton_attaque=-1;
                peloton_defense=-1;
                for(var i=0;i<9;i++){
                    if(peloton_attaque==-1&&pelotons_attaquant[i]!==undefined&&!pelotons_attaquant[i].disperse)peloton_attaque=i;
                    if(peloton_defense==-1&&pelotons_defenseur[i]!==undefined&&!pelotons_defenseur[i].disperse)peloton_defense=i;
                }
                if(peloton_attaque>=0)pelotons_attaquant[peloton_attaque].nombre_debut_tour=pelotons_attaquant[peloton_attaque].nombre_restant;
                if(peloton_defense>=0)pelotons_defenseur[peloton_defense].nombre_debut_tour=pelotons_defenseur[peloton_defense].nombre_restant;
                if(peloton_attaque>=0&&peloton_defense>=0){
                    combat_effectif=1;
                    if(pelotons_defenseur[peloton_defense].heros!==undefined)id_heros.defenseur=pelotons_defenseur[peloton_defense].heros;
                    heros_d=liste_heros[id_heros.defenseur];
                    var resultat_sorts=lancement_sorts(tour);
                    pelotons_attaquant[peloton_attaque].nombre_debut_combat=pelotons_attaquant[peloton_attaque].nombre_restant;
                    pelotons_defenseur[peloton_defense].nombre_debut_combat=pelotons_defenseur[peloton_defense].nombre_restant;
                    var rez_a=(resultat_sorts.a.rez!==undefined)?resultat_sorts.a.rez:null;
                    var rez_a_peloton=(resultat_sorts.a.rez_peloton!==undefined)?resultat_sorts.a.rez_peloton:null;
                    var rez_a_nombre=null;
                    var rez_d=(resultat_sorts.d.rez!==undefined)?resultat_sorts.d.rez:null;
                    var rez_d_peloton=(resultat_sorts.d.rez_peloton!==undefined)?resultat_sorts.d.rez_peloton:null;
                    var rez_d_nombre=null;
                    var nombre_sorts=0;
                    var tour_affiche=0;
                    if(resultat_sorts.a.sort!==undefined){
                        nombre_sorts++;
                        if(rez_a===null){
                            var id=resultat_sorts.a.sort;
                            var html='<th class="tour" rowspan="'+((resultat_sorts.d.sort!==undefined)?'3':'2')+'">'+tour+'</th>';
                            tour_affiche=1;
                            html+='<td colspan="11" class="issue-sort attaquant">';
                            html+=image_html_sort(id);
                            html+='<span>'+resultat_sorts.a.issue+'</span>';
                            html+=resultat_sorts.a.details;
                            html+='</td>';
                            html+='<th class="tour" rowspan="'+((resultat_sorts.d.sort!==undefined)?'3':'2')+'">'+tour+'</th>';
                            var ecole=_ecoles_magie[resultat_sorts.a.ecole].nom_machine.toLowerCase();
                            $('#combat tbody').append('<tr class="'+(impair?'impair ':'')+'sort attaquant '+ecole+'" id="tour-'+tour+'-sort-a">'+html+'</tr>')
                        }
                    }
                    if(resultat_sorts.d.sort!==undefined){
                        if(nombre_sorts===0){
                            var html='<th class="tour" rowspan="2">'+tour+'</th>'
                        }else if(!tour_affiche){
                            var html='<th class="tour" rowspan="3">'+tour+'</th>'
                        }else var html='';
                        nombre_sorts++;
                        if(rez_d===null){
                            tour_affiche=1;
                            var id=resultat_sorts.d.sort;
                            html+='<td colspan="11" class="issue-sort defenseur">';
                            html+=resultat_sorts.d.details;
                            html+='<span>'+resultat_sorts.d.issue+'</span>';
                            html+=image_html_sort(id);
                            html+='</td>';
                            if(nombre_sorts<=1)html+='<th class="tour" rowspan="2">'+tour+'</th>';
                            else if(!tour_affiche)html+='<th class="tour" rowspan="3">'+tour+'</th>';
                            var ecole=_ecoles_magie[resultat_sorts.d.ecole].nom_machine.toLowerCase();
                            $('#combat tbody').append('<tr class="'+(impair?'impair ':'')+'sort defenseur '+ecole+'" id="tour-'+tour+'-sort-d">'+html+'</tr>')
                        }
                    }
                    var resultat=simulation_combat(tour);
                    if(nombre_sorts===0)var html_tour='<th class="tour">'+tour+'</th>';
                    else if(!tour_affiche){
                        var nb_rangees=(resultat_sorts.a.sort!==undefined)+(resultat_sorts.d.sort!==undefined)+1;
                        var html_tour='<th class="tour" rowspan="'+nb_rangees+'">'+tour+'</th>'
                    }else var html_tour='';
                    var html=html_tour;
                    if(resultat.puissance_attaque_base!=resultat.puissance_attaque_totale)var base='<br />('+formate_puissance(resultat.puissance_attaque_base)+')';else var base='';
                    html+='<td>'+formate_puissance(resultat.puissance_attaque_totale)+base+'</td>';
                    html+='<td>'+formate_puissance(pelotons_attaquant[peloton_attaque].nombre_debut_combat)+'</td>';
                    if(pelotons_attaquant[peloton_attaque].nombre_restant===0)var vaincue=8;else var vaincue=0;
                    html+='<td class="unite-'+pelotons_attaquant[peloton_attaque].type+' troupe">'+image_html_troupe(pelotons_attaquant[peloton_attaque].type,vaincue|1)+'</td>';
                    html+='<td class="arme-a">'+image_html_arme(_unites[pelotons_attaquant[peloton_attaque].type].arme,resultat.bonus_arme)+'</td>';
                    if(resultat.pertes_attaquant<=0)html+='<td>0</td>';
                    else{
                        if(pelotons_attaquant[peloton_attaque].nombre_restant===0)html+='<td class="disperse">-'+formate_puissance(resultat.pertes_attaquant)+'</td>';else html+='<td>-'+formate_puissance(resultat.pertes_attaquant)+'</td>';
                        pelotons_attaquant[peloton_attaque].nombre_pertes+=resultat.pertes_attaquant
                    }
                    var rapport=rapport_de_forces(resultat);
                    if(resultat.pertes_attaquant<0)html+='<td class="issue massacre">'+_traduction.defenseur_massacre[_langue]+'&nbsp;&gt;&gt;'+rapport+'</td>';
                    else if(resultat.pertes_defenseur<0)html+='<td class="issue massacre">&lt;&lt;&nbsp;'+_traduction.attaquant_massacre[_langue]+rapport+'</td>';
                    else if(pelotons_attaquant[peloton_attaque].nombre_restant===0&&pelotons_defenseur[peloton_defense].nombre_restant!=0)html+='<td class="issue disperse">&lt;&lt;&nbsp;'+_traduction.attaquant_disperse[_langue]+rapport+'</td>';
                    else if(pelotons_defenseur[peloton_defense].nombre_restant===0&&pelotons_attaquant[peloton_attaque].nombre_restant!=0)html+='<td class="issue disperse">'+_traduction.defenseur_disperse[_langue]+'&nbsp;&gt;&gt;'+rapport+'</td>';
                    else if(pelotons_attaquant[peloton_attaque].nombre_restant===0&&pelotons_defenseur[peloton_defense].nombre_restant===0)html+='<td class="issue disperse">&lt;&lt;&nbsp;'+_traduction.dispersion_mutuelle[_langue]+'&nbsp;&gt;&gt;'+rapport+'</td>';
                    if(resultat.pertes_defenseur<=0)html+='<td>0</td>';
                    else{
                        if(pelotons_defenseur[peloton_defense].nombre_restant===0)html+='<td class="disperse">-'+formate_puissance(resultat.pertes_defenseur)+'</td>';else html+='<td>-'+formate_puissance(resultat.pertes_defenseur)+'</td>';
                        pelotons_defenseur[peloton_defense].nombre_pertes+=resultat.pertes_defenseur
                    }
                    html+='<td class="arme-d">'+image_html_arme(_unites[pelotons_defenseur[peloton_defense].type].arme,(resultat.bonus_arme*-1))+'</td>';
                    if(pelotons_defenseur[peloton_defense].nombre_restant===0)var vaincue=8;else var vaincue=0;
                    html+='<td class="unite-'+pelotons_defenseur[peloton_defense].type+' troupe">'+image_html_troupe(pelotons_defenseur[peloton_defense].type,vaincue|1)+'</td>';
                    html+='<td>'+formate_puissance(pelotons_defenseur[peloton_defense].nombre_debut_combat)+'</td>';
                    if(resultat.puissance_defense_base!=resultat.puissance_defense_totale)var base='<br />('+formate_puissance(resultat.puissance_defense_base)+')';else var base='';
                    html+='<td>'+formate_puissance(resultat.puissance_defense_totale)+base+'</td>';
                    html+=html_tour;
                    $('#combat tbody').append('<tr '+(impair?'class="impair" ':'')+'id="tour-'+tour+'">'+html+'</tr>');
                    tour++;
                    if(impair)impair=false;else impair=true;
                    if(resultat_sorts.a.sort!==undefined&&rez_a!==null){
                        if(pelotons_attaquant[peloton_attaque].nombre_restant>0){
                            if(rez_a=='tmp'){
                                var pertes=resultat.pertes_attaquant;
                                if(pertes==-1)pertes=0;
                                var base_rez=pertes
                            }else if(rez_a=='def'){
                                var base_rez=pelotons_attaquant[peloton_attaque].nombre_restant;
                                if(base_rez<0)base_rez=0
                            }else var base_rez=0;
                            var rez_a_nombre=Math.floor(base_rez*resultat_sorts.a.puissance/100);
                            if((rez_a_nombre+pelotons_attaquant[peloton_attaque].nombre_restant)>pelotons_attaquant[peloton_attaque].nombre_debut_tour)rez_a_nombre=pelotons_attaquant[peloton_attaque].nombre_debut_tour-pelotons_attaquant[peloton_attaque].nombre_restant;
                            pelotons_attaquant[peloton_attaque].nombre_restant+=rez_a_nombre;
                            if(rez_a=='def')pelotons_attaquant[peloton_attaque].nombre_pertes-=rez_a_nombre;
                            resultat_sorts.a.issue=resultat_sorts.a.type+' '+image_html_troupe(pelotons_attaquant[peloton_attaque].type,2)+_traduction.deux_points[_langue];
                            resultat_sorts.a.issue+=' <strong>+'+formate_puissance(rez_a_nombre)+' '+((rez_a_nombre>1)?_traduction.unites[_langue]:_traduction.unite[_langue])+'</strong>';
                            resultat_sorts.a.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue];
                            resultat_sorts.a.issue+=' '+formate_nombre(resultat_sorts.a.puissance,2)+resultat_sorts.a.calcul+' '+_traduction.de[_langue]+' '+formate_puissance(base_rez)+')';
                            if(rez_a=='tmp')pelotons_attaquant[peloton_attaque].nombre_ranimes+=rez_a_nombre
                        }else{
                            var rez_a_nombre=0;
                            resultat_sorts.a.issue=resultat_sorts.a.type+_traduction.rez_pas_de_survivant[_langue]
                        }
                        var id=resultat_sorts.a.sort;
                        var html='<td colspan="11" class="issue-sort attaquant">';
                        html+=image_html_sort(id);
                        html+='<span>'+resultat_sorts.a.issue+'</span>';
                        html+=resultat_sorts.a.details;
                        html+='</td>';
                        var ecole=_ecoles_magie[resultat_sorts.a.ecole].nom_machine.toLowerCase();
                        $('#combat tbody').append('<tr class="'+(impair?'impair ':'')+'sort attaquant '+ecole+'" id="tour-'+tour+'-sort-a">'+html+'</tr>')
                    }
                    if(resultat_sorts.d.sort!==undefined&&rez_d!==null){
                        if(pelotons_defenseur[peloton_defense].nombre_restant>0){
                            if(rez_d=='tmp'){
                                var pertes=resultat.pertes_defenseur;
                                if(pertes==-1)pertes=0;
                                var base_rez=pertes
                            }else if(rez_d=='def'){
                                var base_rez=pelotons_defenseur[peloton_defense].nombre_restant;
                                if(base_rez<0)base_rez=0
                            }else var base_rez=0;
                            var rez_d_nombre=Math.floor(base_rez*resultat_sorts.d.puissance/100);
                            if((rez_d_nombre+pelotons_defenseur[peloton_defense].nombre_restant)>pelotons_defenseur[peloton_defense].nombre_debut_tour)rez_d_nombre=pelotons_defenseur[peloton_defense].nombre_debut_tour-pelotons_defenseur[peloton_defense].nombre_restant;
                            pelotons_defenseur[peloton_defense].nombre_restant+=rez_d_nombre;
                            if(rez_d=='def')pelotons_defenseur[peloton_defense].nombre_pertes-=rez_d_nombre;
                            resultat_sorts.d.issue=resultat_sorts.d.type+' '+image_html_troupe(pelotons_defenseur[peloton_defense].type,2)+_traduction.deux_points[_langue];
                            resultat_sorts.d.issue+=' <strong>+'+formate_puissance(rez_d_nombre)+' '+((rez_d_nombre>1)?_traduction.unites[_langue]:_traduction.unite[_langue])+'</strong>';
                            resultat_sorts.d.issue+=' ('+_traduction.puissance[_langue]+_traduction.deux_points[_langue];
                            resultat_sorts.d.issue+=' '+formate_nombre(resultat_sorts.d.puissance,2)+resultat_sorts.d.calcul+' '+_traduction.de[_langue]+' '+formate_puissance(base_rez)+')';
                            if(rez_d=='tmp')pelotons_defenseur[peloton_defense].nombre_ranimes+=rez_d_nombre
                        }
                        else{
                            var rez_d_nombre=0;
                            resultat_sorts.d.issue=resultat_sorts.d.type+_traduction.rez_pas_de_survivant[_langue]
                        }
                        var id=resultat_sorts.d.sort;
                        var html='<td colspan="11" class="issue-sort defenseur">';
                        html+=resultat_sorts.d.details;
                        html+='<span>'+resultat_sorts.d.issue+'</span>';
                        html+=image_html_sort(id);
                        html+='</td>';
                        var ecole=_ecoles_magie[resultat_sorts.d.ecole].nom_machine.toLowerCase();
                        $('#combat tbody').append('<tr class="'+(impair?'impair ':'')+'sort defenseur '+ecole+'" id="tour-'+tour+'-sort-d">'+html+'</tr>')
                    }
                }
            }
            var issue=0;
            if(peloton_attaque<0&&peloton_defense<0&&resultat.faux_nul===0){
                if(combat_effectif==1){
                    var html='<th><span class="cap">'+_traduction.fin[_langue]+'</span></th>';
                    html+='<td></td><td></td><td></td><td></td><td></td>';
                    html+='<td>'+_traduction.destruction_mutuelle[_langue]+'</td>';
                    html+='<td></td><td></td><td></td><td></td><td></td>';
                    html+='<th><span class="cap">'+_traduction.fin[_langue]+'</span></th>';
                    $('#combat tbody').append('<tr>'+html+'</tr>')
                }else{
                    $('#conteneur').append('<p>Tsss…<p>')
                }
            }
            else{
                if(peloton_attaque>=0||(resultat.faux_nul==1&&peloton_defense<0)){
                    issue=1;
                    if(resultat.faux_nul==1&&peloton_attaque<0)peloton_attaque=dernier_peloton;
                    if(rez_a_peloton===peloton_attaque&&rez_a=='tmp'){
                        if(pelotons_attaquant[peloton_attaque].nombre_restant>rez_a_nombre){
                            pelotons_attaquant[peloton_attaque].nombre_restant-=rez_a_nombre
                        }else{
                            pelotons_attaquant[peloton_attaque].nombre_restant=0
                        }
                        tour++
                    }
                    var html='<th><span class="cap">'+_traduction.fin[_langue]+'</span></th>';
                    html+='<td></td>';
                    html+='<td>'+formate_puissance(pelotons_attaquant[peloton_attaque].nombre_restant)+'</td>';
                    html+='<td class="unite-'+pelotons_attaquant[peloton_attaque].type+' troupe">'+image_html_troupe(pelotons_attaquant[peloton_attaque].type,1)+'</td>';
                    var arme=_unites[pelotons_attaquant[peloton_attaque].type].arme;
                    html+='<td class="arme-'+arme+'-neutre">'+image_html_arme(_unites[pelotons_attaquant[peloton_attaque].type].arme,0)+'</td>';
                    html+='<td></td>';
                    html+='<td>'+_traduction.attaquant_victorieux[_langue]+'</td>';
                    html+='<td></td><td></td><td></td><td></td><td></td>';
                    html+='<th><span class="cap">'+_traduction.fin[_langue]+'</span></th>';
                    $('#combat tbody').append('<tr id="tour-fin">'+html+'</tr>')
                }else if(peloton_defense>=0||(resultat.faux_nul==-1||peloton_attaque<0)){
                    issue=-1;
                    if(resultat.faux_nul==-1&&peloton_defense<0)peloton_defense=dernier_peloton;
                    if(rez_d_peloton==peloton_defense&&rez_d=='tmp'){
                        if(pelotons_defenseur[peloton_defense].nombre_restant>rez_d_nombre){
                            pelotons_defenseur[peloton_defense].nombre_restant-=rez_d_nombre
                        }else{
                            pelotons_defenseur[peloton_defense].nombre_restant=0
                        }
                        tour++
                    }
                    var html='<th><span class="cap">'+_traduction.fin[_langue]+'</span></th><td></td><td></td><td></td><td></td><td></td>';
                    html+='<td>'+_traduction.attaquant_repousse[_langue]+'</td>';
                    html+='<td></td>';
                    var arme=_unites[pelotons_defenseur[peloton_defense].type].arme;
                    html+='<td class="arme-'+arme+'-neutre">'+image_html_arme(_unites[pelotons_defenseur[peloton_defense].type].arme,0)+'</td>';
                    html+='<td class="unite-'+pelotons_defenseur[peloton_defense].type+' troupe">'+image_html_troupe(pelotons_defenseur[peloton_defense].type,1)+'</td>';
                    html+='<td>'+formate_puissance(pelotons_defenseur[peloton_defense].nombre_restant)+'</td>';
                    html+='<td></td>';
                    html+='<th><span class="cap">'+_traduction.fin[_langue]+'</span></th>';
                    $('#combat tbody').append('<tr id="tour-fin">'+html+'</tr>')
                }
            }
            if(combat_effectif==1){
                var neant='—';
                var cout_total_a=0;
                var cout_total_d=0;
                var cout_total_rare_a=0;
                var cout_total_rare_d=0;
                var nombre_unites_depart_a=0;
                var nombre_unites_depart_d=0;
                var nombre_unites_perdues_a=0;
                var nombre_unites_perdues_d=0;
                var puissance_totale_a=0;
                var puissance_totale_d=0;

                var modificateur_pertes_attaquant =- 0
                +((heros_d!==undefined&&heros_d.bonus_massacreur!==undefined)?(heros_d.bonus_massacreur/100):0)
                +((heros_d!==undefined&&heros_d.bonus_legendary_sovereign_c!==undefined)?(heros_d.bonus_legendary_sovereign_c/100):0)
                +((heros_d!==undefined&&heros_d.bonus_legendary_kingundead_c!==undefined)?(heros_d.bonus_legendary_kingundead_c/100):0)
                +((heros_d!==undefined&&heros_d.bonus_legendary_dragonkinght_a!==undefined)?(heros_d.bonus_legendary_dragonkinght_a/100):0)
                -((heros_a!==undefined&&heros_a.bonus_legendary_legpaladin_a!==undefined)?(heros_a.bonus_legendary_legpaladin_a/100):0)
                -((heros_a!==undefined&&heros_a.bonus_legendary_ethernalnight_a!==undefined)?(heros_a.bonus_legendary_ethernalnight_a/100):0)
                -((heros_a!==undefined&&heros_a.bonus_legendary_legmagician_c!==undefined)?(heros_a.bonus_legendary_legmagician_c/100):0);
//                +(bonus_larmes_pertes_attaquant/100);
                var modificateur_pertes_defenseur =- ((heros_d!==undefined&&heros_d.bonus_logisticien!==undefined)?(heros_d.bonus_logisticien/100):0)
                +((heros_a!==undefined&&heros_a.bonus_massacreur!==undefined)?(heros_a.bonus_massacreur/100):0)
                +((heros_a!==undefined&&heros_a.bonus_legendary_sovereign_c!==undefined)?(heros_a.bonus_legendary_sovereign_c/100):0)
                +((heros_a!==undefined&&heros_a.bonus_legendary_kingundead_c!==undefined)?(heros_a.bonus_legendary_kingundead_c/100):0)
                +((heros_a!==undefined&&heros_a.bonus_legendary_dragonkinght_a!==undefined)?(heros_a.bonus_legendary_dragonkinght_a/100):0)
                -((heros_d!==undefined&&heros_d.bonus_legendary_legpaladin_a!==undefined)?(heros_d.bonus_legendary_legpaladin_a/100):0)
                -((heros_d!==undefined&&heros_d.bonus_legendary_ethernalnight_a!==undefined)?(heros_d.bonus_legendary_ethernalnight_a/100):0)
                -((heros_d!==undefined&&heros_d.bonus_legendary_legmagician_c!==undefined)?(heros_d.bonus_legendary_legmagician_c/100):0)
                +(bonus_larmes_pertes_defenseur/100);
                var relever_les_morts={
                    attaquant:0,
                    defenseur:0
                };

                if(competences_hereditaires.attaquant.relever_les_morts>0&&id_heros.attaquant!==null){
                    var bonus=_competences_hereditaires.relever_les_morts.bonus[competences_hereditaires.attaquant.relever_les_morts];
                    bonus*=1+(_multiplicateur_voie*_classement_voies[classement_voies.attaquant][_competences_hereditaires.relever_les_morts.voie]);
                    relever_les_morts.attaquant+=bonus/100
                }
                if(competences_hereditaires.defenseur.relever_les_morts>0&&id_heros.defenseur!==null){
                    var bonus=_competences_hereditaires.relever_les_morts.bonus[competences_hereditaires.defenseur.relever_les_morts];
                    bonus*=1+(_multiplicateur_voie*_classement_voies[classement_voies.defenseur][_competences_hereditaires.relever_les_morts.voie]);
                    relever_les_morts.defenseur+=bonus/100
                }
                var resurrection={
                    attaquant:0,
                    defenseur:0
                };

                var potentiel_resurrection={
                    attaquant:0,
                    defenseur:0
                };

                if(competences_hereditaires.attaquant.resurrection>0&&id_heros.attaquant!==null){
                    var bonus=_competences_hereditaires.resurrection.bonus[competences_hereditaires.attaquant.resurrection];
                    bonus*=1+(_multiplicateur_voie*_classement_voies[classement_voies.attaquant][_competences_hereditaires.resurrection.voie]);
                    resurrection.attaquant+=bonus/100;
                    potentiel_resurrection.attaquant=resurrection.attaquant*puissance_armee_attaque
                }
                if(competences_hereditaires.defenseur.resurrection>0&&id_heros.defenseur!==null){
                    var bonus=_competences_hereditaires.resurrection.bonus[competences_hereditaires.defenseur.resurrection];
                    bonus*=1+(_multiplicateur_voie*_classement_voies[classement_voies.defenseur][_competences_hereditaires.resurrection.voie]);
                    resurrection.defenseur+=bonus/100;
                    potentiel_resurrection.defenseur=resurrection.defenseur*puissance_armee_defense
                }
                for(var i=2;i<=8;i++){
                    var html='<tr>';
                    if(pelotons_attaquant[i]!==undefined){
                        var creature=_unites[pelotons_attaquant[i].type];
                        if(window.innerWidth<1285&&creature.nom_abrege!==undefined&&creature.nom_abrege[_langue]!==undefined)var nom_creature='<abbr title="'+creature.nom[_langue]+'">'+creature.nom_abrege[_langue]+'</abbr>';else var nom_creature=creature.nom[_langue];
                        html+='<td class="unite">'+image_html_troupe(pelotons_attaquant[i].type,2)+nom_creature+'</td>';
                        nombre_unites_depart_a+=pelotons_attaquant[i].nombre;
                        html+='<td>'+formate_puissance(pelotons_attaquant[i].nombre)+'</td>';
                        if (statut.attaquant === 0) {
                            if (id_heros.attaquant !== null) {
                                var pertes = (pelotons_attaquant[i].nombre_pertes+pelotons_attaquant[i].nombre_pertes_magie)*(_facteur_pertes+modificateur_pertes_attaquant);
                                if (pertes>0 && pertes<1)pertes=1;
                                if (pertes<0)pertes=0;
                                pertes=Math.floor(pertes)
                            } else {
                                if (issue < 1) {
                                    var pertes = pelotons_attaquant[i].nombre
                                } else if (issue === 1) {
                                    var pertes = 0
                                }
                            }
                        } else {
                            var aaa = pelotons_attaquant[i].nombre_pertes;
                            var bbb = pelotons_attaquant[i].nombre_pertes_magie;
                            var ccc = pelotons_attaquant[i].nombre_bonus_perdu;
                            var ddd = pelotons_attaquant[i].nombre_ranimes;
                            var eee = _facteur_pertes;
                            var fff = modificateur_pertes_attaquant;
                            var ggg = pelotons_attaquant[i].nombre_bonus;
                            
                            var unit_loss_old = aaa + bbb - ccc - ddd; // bugged
                            var unit_loss_new = aaa + bbb - ggg - ddd;
                            var unit_loss = unit_loss_old;
                            if (ccc < ggg) {
                                //unit_loss = unit_loss_new;
                            }

                            var pertes = unit_loss * (eee + fff);
                            if (pertes > 0 && pertes < 1) {
                                pertes = 1;
                            }
                            if (pertes < 0) {
                                pertes = 0;
                            }
                            pertes = Math.floor(pertes)
                        }
//                        _(aaa);
//                        _(bbb);
//                        _(ccc);
//                        _(ddd);
//                        _(eee);
//                        _(fff);
//                        _(ggg);
//                        _(unit_loss_old);
//                        _(unit_loss_new);
//                        _(unit_loss);
//                        _(pertes);
//                        _('xxx');
                        
                        var pertes_sans_resu = pertes;
                        if (relever_les_morts.attaquant > 0) {
                            var rlm = Math.floor(pertes*relever_les_morts.attaquant);
                            pertes -= rlm;
                            pelotons_attaquant[i].morts_releves=rlm
                        }
                        if(resurrection.attaquant>0&&creature.puissance<=potentiel_resurrection.attaquant){
                            var resu=Math.floor(potentiel_resurrection.attaquant/creature.puissance);
                            if(resu>pertes)resu=pertes;
                            potentiel_resurrection.attaquant-=(resu*creature.puissance);
                            pertes-=resu;
                            pelotons_attaquant[i].morts_ressuscites=resu
                        }
                        nombre_unites_perdues_a+=pertes;
                        html += '<td class="pertes">'
                              + ((pertes>0) ? formate_puissance(pertes) : neant)
                              + ((pertes_sans_resu!=pertes) ? (' <span class="texte-barre">'+pertes_sans_resu+'</span>') : '')
                              + '</td>';
                        html+='<td>'+formate_puissance(pelotons_attaquant[i].nombre*creature.puissance)+'</td>';
                        var puissance=pertes*creature.puissance;
                        html+='<td class="pertes">'+((puissance>0)?formate_puissance(puissance):neant)+'</td>';
                        puissance_totale_a+=puissance;
                        if(creature.cout!==undefined&&creature.cout.G!==undefined)var cout=pertes*creature.cout.G;else var cout=0;
                        cout_total_a+=cout;
                        var cout_rare=0;
                        var cout_rare_html='';
                        if(creature.rang>=5){
                            for(var r in _ressources)if(creature.cout!==undefined&&creature.cout[r]!==undefined&&r!='G'){
                                var cout_rare_x=pertes*creature.cout[r];
                                cout_rare+=cout_rare_x;
                                cout_rare_html+=image_html_ressource(r)+' '+formate_puissance(cout_rare_x)
                            }
                        }
                        cout_total_rare_a+=cout_rare;
                        html+='<td class="pertes">';
                        if(cout>0)html+=formate_puissance(cout);else html+=neant;
                        html+='</td><td class="rares pertes">';
                        if(cout_rare>0)html+=cout_rare_html;else html+=neant;
                        html+='</td>'
                    }else html+='<td colspan="7"></td>';
                    html+='<th class="peloton">'+(i-1)+'</th>';
                    if(pelotons_defenseur[i]!==undefined){
                        var creature=_unites[pelotons_defenseur[i].type];
                        if(window.innerWidth<1285&&creature.nom_abrege!==undefined&&creature.nom_abrege[_langue]!==undefined)var nom_creature='<abbr title="'+creature.nom[_langue]+'">'+creature.nom_abrege[_langue]+'</abbr>';else var nom_creature=creature.nom[_langue];
                        html+='<td class="unite">'+image_html_troupe(pelotons_defenseur[i].type,2)+nom_creature+'</td>';
                        nombre_unites_depart_d+=pelotons_defenseur[i].nombre;
                        html+='<td>'+formate_puissance(pelotons_defenseur[i].nombre)+'</td>';
                        if(statut.defenseur===0){
                            if(id_heros.defenseur!==null){
                                var pertes=(pelotons_defenseur[i].nombre_pertes+pelotons_defenseur[i].nombre_pertes_magie)*(_facteur_pertes+modificateur_pertes_defenseur);
                                if(pertes>0&&pertes<1)pertes=1;
                                if(pertes<0)pertes=0;
                                pertes=Math.floor(pertes)
                            }else{
                                if(issue==1){
                                    var pertes=pelotons_defenseur[i].nombre
                                }else if(issue<1){
                                    var pertes=0
                                }
                                if(creature.attrition_pnj!==undefined&&creature.attrition_pnj==1){
                                    pertes=(pelotons_defenseur[i].nombre_pertes+pelotons_defenseur[i].nombre_pertes_magie)*(_facteur_pertes+modificateur_pertes_defenseur);
                                    if(pertes>0&&pertes<1)pertes=1;
                                    if(pertes<0)pertes=0;
                                    pertes=Math.floor(pertes)
                                }
                            }
                        }else{
                            var pertes=(pelotons_defenseur[i].nombre_pertes+pelotons_defenseur[i].nombre_pertes_magie-pelotons_defenseur[i].nombre_bonus_perdu-pelotons_defenseur[i].nombre_ranimes)*(_facteur_pertes+modificateur_pertes_defenseur);
                            if(pertes>0&&pertes<1)pertes=1;
                            if(pertes<0)pertes=0;
                            pertes=Math.floor(pertes)
                        }
                        var pertes_sans_resu=pertes;
                        if(relever_les_morts.defenseur>0){
                            var rlm=Math.floor(pertes*relever_les_morts.defenseur);
                            pertes-=rlm;
                            pelotons_defenseur[i].morts_releves=rlm
                        }
                        if(resurrection.defenseur>0&&creature.puissance<=potentiel_resurrection.defenseur){
                            var resu=Math.floor(potentiel_resurrection.defenseur/creature.puissance);
                            if(resu>pertes)resu=pertes;
                            potentiel_resurrection.defenseur-=(resu*creature.puissance);
                            pertes-=resu;
                            pelotons_defenseur[i].morts_ressuscites=resu
                        }
                        nombre_unites_perdues_d+=pertes;
                        html+='<td class="pertes">'+((pertes>0)?formate_puissance(pertes):neant)+((pertes_sans_resu!=pertes)?(' <span class="texte-barre">'+pertes_sans_resu+'</span>'):'')+'</td>';
                        html+='<td>'+formate_puissance(pelotons_defenseur[i].nombre*creature.puissance)+'</td>';
                        var puissance=pertes*creature.puissance;
                        html+='<td class="pertes">'+((puissance>0)?formate_puissance(puissance):neant)+'</td>';
                        puissance_totale_d+=puissance;
                        if(creature.cout!==undefined&&creature.cout.G!==undefined)var cout=pertes*creature.cout.G;else var cout=0;
                        cout_total_d+=cout;
                        var cout_rare=0;
                        var cout_rare_html='';
                        if(creature.rang>=5){
                            for(var r in _ressources)if(creature.cout!==undefined&&creature.cout[r]!==undefined&&r!='G'){
                                var cout_rare_x=pertes*creature.cout[r];
                                cout_rare+=cout_rare_x;
                                cout_rare_html+=image_html_ressource(r)+' '+formate_puissance(cout_rare_x)
                            }
                        }
                        cout_total_rare_d+=cout_rare;
                        html+='<td class="pertes">';
                        if(cout>0)html+=formate_puissance(cout);else html+=neant;
                        html+='</td><td class="rares pertes">';
                        if(cout_rare>0)html+=cout_rare_html;else html+=neant;
                        html+='</td>'
                    }else html+='<td colspan="7"></td>';
                    html+='</tr>';
                    if(pelotons_attaquant[i]!==undefined||pelotons_defenseur[i]!==undefined){
                        $('#pertes tbody').append(html)
                    }
                }
                var html='<tr class="totaux">';
                html+='<td class="unite"></td>';
                html+='<td>'+formate_puissance(nombre_unites_depart_a)+'</td>';
                html+='<td class="pertes">'+((nombre_unites_perdues_a>0)?formate_puissance(nombre_unites_perdues_a):neant)+'</td>';
                html+='<td>'+formate_puissance(puissance_armee_attaque)+'</td>';
                html+='<td class="pertes">'+((puissance_totale_a>0)?formate_puissance(puissance_totale_a):neant)+'</td>';
                html+='<td class="pertes">';
                if(cout_total_a>0)html+=formate_puissance(cout_total_a);else html+=neant;
                html+='</td><td class="rares-total pertes">';
                if(cout_total_rare_a>0)html+=formate_puissance(cout_total_rare_a);else html+=neant;
                html+='</td>';
                html+='<th class="peloton">'+_traduction.total[_langue]+'</th>';
                html+='<td class="unite"></td>';
                html+='<td>'+formate_puissance(nombre_unites_depart_d)+'</td>';
                html+='<td class="pertes">'+((nombre_unites_perdues_d>0)?formate_puissance(nombre_unites_perdues_d):neant)+'</td>';
                html+='<td>'+formate_puissance(puissance_armee_defense)+'</td>';
                html+='<td class="pertes">'+((puissance_totale_d>0)?formate_puissance(puissance_totale_d):neant)+'</td>';
                html+='<td class="pertes">';
                if(cout_total_d>0)html+=formate_puissance(cout_total_d);else html+=neant;
                html+='</td><td class="rares-total pertes">';
                if(cout_total_rare_d>0)html+=formate_puissance(cout_total_rare_d);else html+=neant;
                html+='</td></tr>';
                $('#pertes tbody').append(html);
                $('#pertes').removeClass('cache')
            }
            if(competences_hereditaires.attaquant.relever_les_morts>0&&id_heros.attaquant!==null){
                var resultat='';
                for(var p=2;p<9;p++)if(pelotons_attaquant[p]!==undefined&&pelotons_attaquant[p].morts_releves!==undefined)resultat+=formate_puissance(pelotons_attaquant[p].morts_releves)+' '+image_html_troupe(pelotons_attaquant[p].type,3)+' ';var message=_competences_hereditaires.relever_les_morts.nom[_langue]+' ('+formate_nombre(relever_les_morts.attaquant*100,2)+_traduction.pourcent[_langue]+')'+_traduction.deux_points[_langue]+' <span class="petit">'+resultat+'</span>';
                $('#combat tbody').append('<tr class="relever-les-morts attaquant"><td colspan="13">'+message+'</td></tr>')
            }
            if(competences_hereditaires.defenseur.relever_les_morts>0&&id_heros.defenseur!==null){
                var resultat='';
                for(var p=2;p<9;p++)if(pelotons_defenseur[p]!==undefined&&pelotons_defenseur[p].morts_releves!==undefined)resultat+=formate_puissance(pelotons_defenseur[p].morts_releves)+' '+image_html_troupe(pelotons_defenseur[p].type,3)+' ';var message=_competences_hereditaires.relever_les_morts.nom[_langue]+' ('+formate_nombre(relever_les_morts.defenseur*100,2)+_traduction.pourcent[_langue]+')'+_traduction.deux_points[_langue]+' <span class="petit">'+resultat+'</span>';
                $('#combat tbody').append('<tr class="relever-les-morts defenseur"><td colspan="13">'+message+'</td></tr>')
            }
            if(competences_hereditaires.attaquant.resurrection>0&&id_heros.attaquant!==null){
                var resultat='';
                for(var p=2;p<9;p++)if(pelotons_attaquant[p]!==undefined&&pelotons_attaquant[p].morts_ressuscites!==undefined)resultat+=formate_puissance(pelotons_attaquant[p].morts_ressuscites)+' '+image_html_troupe(pelotons_attaquant[p].type,3)+' ';if(resultat=='')resultat=_traduction.sans_effet[_langue];
                var message=_competences_hereditaires.resurrection.nom[_langue]+' ('+formate_nombre(resurrection.attaquant*100,2)+_traduction.pourcent[_langue]+')'+_traduction.deux_points[_langue]+' <span class="petit">'+resultat+'</span>';
                $('#combat tbody').append('<tr class="resurrection attaquant"><td colspan="13">'+message+'</td></tr>')
            }
            if(competences_hereditaires.defenseur.resurrection>0&&id_heros.defenseur!==null){
                var resultat='';
                for(var p=2;p<9;p++)if(pelotons_defenseur[p]!==undefined&&pelotons_defenseur[p].morts_ressuscites!==undefined)resultat+=formate_puissance(pelotons_defenseur[p].morts_ressuscites)+' '+image_html_troupe(pelotons_defenseur[p].type,3)+' ';if(resultat=='')resultat=_traduction.sans_effet[_langue];
                var message=_competences_hereditaires.resurrection.nom[_langue]+' ('+formate_nombre(resurrection.defenseur*100,2)+_traduction.pourcent[_langue]+')'+_traduction.deux_points[_langue]+' <span class="petit">'+resultat+'</span>';
                $('#combat tbody').append('<tr class="resurrection defenseur"><td colspan="13">'+message+'</td></tr>')
            }
            var experience_armee_attaque=0;
            var experience_armee_defense=0;
            var puissance_attaque_dispersee=0;
            var puissance_defense_dispersee=0;
            for(var i=0;i<9;i++){
                if(pelotons_attaquant[i]!==undefined){
                    var puissance_unite=_unites[pelotons_attaquant[i].type].puissance;
                    var ratio=_unites[pelotons_attaquant[i].type].ratio_xp;
                    if(issue>=0)var unites_eliminees=pelotons_attaquant[i].nombre_pertes-pelotons_attaquant[i].nombre_bonus;else var unites_eliminees=pelotons_attaquant[i].nombre_pertes+pelotons_attaquant[i].nombre_pertes_magie-pelotons_attaquant[i].nombre_bonus;
                    if(unites_eliminees<0)unites_eliminees=0;
                    var puissance_eliminee=unites_eliminees*puissance_unite;
                    puissance_attaque_dispersee+=puissance_eliminee;
                    pelotons_attaquant[i].experience=puissance_eliminee/ratio;
                    experience_armee_attaque+=pelotons_attaquant[i].experience
                }
                if(pelotons_defenseur[i]!==undefined){
                    var puissance_unite=_unites[pelotons_defenseur[i].type].puissance;
                    var ratio=_unites[pelotons_defenseur[i].type].ratio_xp;
                    var unites_eliminees=pelotons_defenseur[i].nombre_pertes+pelotons_defenseur[i].nombre_pertes_magie-pelotons_defenseur[i].nombre_bonus;
                    if(unites_eliminees<0)unites_eliminees=0;
                    var puissance_eliminee=unites_eliminees*puissance_unite;
                    puissance_defense_dispersee+=puissance_eliminee;
                    pelotons_defenseur[i].experience=puissance_eliminee/ratio;
                    experience_armee_defense+=pelotons_defenseur[i].experience
                }
            }
            if(rencontre_jcj){
                if(competences_hereditaires.attaquant.butin_de_guerre>0&&id_heros.attaquant!==null){
                    var bonus=_competences_hereditaires.butin_de_guerre.bonus[competences_hereditaires.attaquant.butin_de_guerre];
                    bonus*=1+(_multiplicateur_voie*_classement_voies[classement_voies.attaquant][_competences_hereditaires.butin_de_guerre.voie]);
                    var butin_attaquant=puissance_defense_dispersee*bonus/100
                }
                if(competences_hereditaires.defenseur.butin_de_guerre>0&&id_heros.defenseur!==null){
                    var bonus=_competences_hereditaires.butin_de_guerre.bonus[competences_hereditaires.defenseur.butin_de_guerre];
                    bonus*=1+(_multiplicateur_voie*_classement_voies[classement_voies.defenseur][_competences_hereditaires.butin_de_guerre.voie]);
                    var butin_defenseur=puissance_attaque_dispersee*bonus/100
                }
                if((competences_hereditaires.attaquant.butin_de_guerre>0&&id_heros.attaquant!==null)||(competences_hereditaires.defenseur.butin_de_guerre>0&&id_heros.defenseur!==null)){
                    var butin='<table id="butin"><caption class="plus">'+_competences_hereditaires.butin_de_guerre.nom[_langue]+'</caption>';
                    butin+='<thead><tr><th class="attaquant">'+_traduction.attaquant[_langue]+'</th><th class="defenseur">'+_traduction.defenseur[_langue]+'</th></tr></thead>';
                    butin+='<tbody><tr><td>';
                    if(butin_attaquant!==undefined)butin+=image_html_ressource('G')+' '+formate_puissance(butin_attaquant);
                    butin+='</td><td>';
                    if(butin_defenseur!==undefined)butin+=image_html_ressource('G')+' '+formate_puissance(butin_defenseur);
                    butin+='</td></tr></tbody></table>';
                    $('#pertes').after(butin)
                }
                $('#butin caption').click(function(){
                    controle_caption('butin')
                })
            }
            var honneur_attaquant=(puissance_armee_defense-puissance_armee_attaque)/puissance_armee_attaque;
            var honneur_defenseur=(puissance_armee_attaque-puissance_armee_defense)/puissance_armee_defense;
            $('#experience').removeClass('cache');
            $('#experience tbody').append('<tr>'+'<td>'+((id_heros.attaquant!==null)?formate_honneur(honneur_attaquant):'/')+'</td>'+'<th class="droite">'+_traduction.honneur[_langue]+'</th>'+'<td>'+((id_heros.defenseur!==null)?formate_honneur(honneur_defenseur):'/')+'</td>'+'</tr>');
            var bonus_xp_attaquant=honneur_attaquant;
            var bonus_xp_defenseur=honneur_defenseur;
            var points_a={
                honneur:0,
                pertes:0,
                total:0
            };

            var points_d={
                honneur:0,
                pertes:0,
                total:0
            };

            if(honneur_attaquant>-0.20&&honneur_attaquant<=0.20)points_a.honneur+=1;
            if(honneur_defenseur>-0.20&&honneur_defenseur<=0.20)points_d.honneur+=1;
            if(honneur_attaquant>0.20&&honneur_attaquant<=0.80)points_a.honneur+=2;
            if(honneur_defenseur>0.20&&honneur_defenseur<=0.80)points_d.honneur+=2;
            if(honneur_attaquant>0.80)points_a.honneur+=3;
            if(honneur_defenseur>0.80)points_d.honneur+=3;
            var quotient_pertes_a=puissance_totale_a/puissance_armee_attaque;
            var quotient_pertes_d=puissance_totale_d/puissance_armee_defense;
            if(quotient_pertes_a<0.10)points_a.pertes+=2;
            if(quotient_pertes_d<0.10)points_d.pertes+=2;
            if(quotient_pertes_a>=0.10&&quotient_pertes_a<=0.20)points_a.pertes+=1;
            if(quotient_pertes_d>=0.10&&quotient_pertes_d<=0.20)points_d.pertes+=1;
            points_a.total=points_a.honneur+points_a.pertes;
            points_d.total=points_d.honneur+points_d.pertes;
            if(issue==1){
                var type_victoire=_traduction.victoire_attaquant[_langue].replace(/X/,_victoires[points_a.total][_langue]);
                type_victoire+='<br />'+image_html_score(points_a.total,5);
                $('#victoire caption').addClass('attaquant').removeClass('defenseur')
            }else{
                var type_victoire=_traduction.victoire_defenseur[_langue].replace(/X/,_victoires[points_d.total][_langue]);
                type_victoire+='<br />'+image_html_score(points_d.total,5);
                $('#victoire caption').addClass('defenseur').removeClass('attaquant')
            }
            $('#victoire').removeClass('cache');
            $('#victoire caption').html(type_victoire);
            $('#victoire thead').html('<tr><th class="attaquant">'+_traduction.attaquant[_langue]+'</th><th></th><th class="defenseur">'+_traduction.defenseur[_langue]+'</th></tr>');
            var html='<tr>';
            html+='<td>'+image_html_score(points_a.honneur,3)+'('+formate_honneur(honneur_attaquant)+')</td>';
            html+='<th>'+_traduction.honneur[_langue]+'</th>';
            html+='<td>'+image_html_score(points_d.honneur,3)+'('+formate_honneur(honneur_defenseur)+')</td>';
            html+='</tr><tr>';
            html+='<td>'+image_html_score(points_a.pertes,2)+'('+formate_nombre(quotient_pertes_a*100,0)+'% / '+formate_puissance(puissance_totale_a)+')</td>';
            html+='<th>'+_traduction.pertes[_langue]+'</th>';
            html+='<td>'+image_html_score(points_d.pertes,2)+'('+formate_nombre(quotient_pertes_d*100,0)+'% / '+formate_puissance(puissance_totale_d)+')</td>';
            html+='</tr>';
            $('#victoire tbody').html(html);
            if(rencontre_jcj){
                bonus_xp_attaquant+=(honneur_royaume_attaquant/100)+_bonus_jcj;
                bonus_xp_defenseur+=(honneur_royaume_defenseur/100)+_bonus_jcj;
                $('#experience tbody').append('<tr>'+'<td>'+((id_heros.attaquant!==null)?formate_honneur(honneur_royaume_attaquant/100):'/')+'</td>'+'<th class="droite">'+_traduction.honneur_royaume[_langue]+'</th>'+'<td>'+((id_heros.defenseur!==null)?formate_honneur(honneur_royaume_defenseur/100):'/')+'</td>'+'</tr>');
                $('#experience tbody').append('<tr>'+'<td>'+((id_heros.attaquant!==null)?formate_honneur(_bonus_jcj):'/')+'</td>'+'<th class="droite">'+_traduction.bonus_jcj[_langue]+'</th>'+'<td>'+((id_heros.defenseur!==null)?formate_honneur(_bonus_jcj):'/')+'</td>'+'</tr>')
            }
            if(bonus_dolmens_attaquant>0||bonus_dolmens_defenseur>0){
                bonus_xp_attaquant+=(bonus_dolmens_attaquant/100);
                bonus_xp_defenseur+=(bonus_dolmens_defenseur/100);
                $('#experience tbody').append('<tr>'+'<td>'+((id_heros.attaquant!==null)?formate_honneur(bonus_dolmens_attaquant/100):'/')+'</td>'+'<th class="droite">'+_traduction.bonus_dolmens[_langue]+'</th>'+'<td>'+((id_heros.defenseur!==null)?formate_honneur(bonus_dolmens_defenseur/100):'/')+'</td>'+'</tr>')
            }
            if(bonus_alliance_xp_attaquant>0||bonus_alliance_xp_defenseur>0){
                bonus_xp_attaquant+=(bonus_alliance_xp_attaquant/100);
                bonus_xp_defenseur+=(bonus_alliance_xp_defenseur/100);
                $('#experience tbody').append('<tr>'+'<td>'+((id_heros.attaquant!==null)?formate_honneur(bonus_alliance_xp_attaquant/100):'/')+'</td>'+'<th class="droite">'+_traduction.bonus_alliance[_langue]+' ('+_competences_alliance.inspiration.nom[_langue]+')</th>'+'<td>'+((id_heros.defenseur!==null)?formate_honneur(bonus_alliance_xp_defenseur/100):'/')+'</td>'+'</tr>')
            }
            if((liste_heros[id_heros.attaquant]!==undefined&&liste_heros[id_heros.attaquant].bonus_exp!==undefined&&liste_heros[id_heros.attaquant].bonus_exp>0)||(liste_heros[id_heros.defenseur]!==undefined&&liste_heros[id_heros.defenseur].bonus_exp!==undefined&&liste_heros[id_heros.defenseur].bonus_exp>0)){
                var bonus_artes_attaquant=0;
                if(liste_heros[id_heros.attaquant]!==undefined&&liste_heros[id_heros.attaquant].bonus_exp!==undefined)var bonus_artes_attaquant=liste_heros[id_heros.attaquant].bonus_exp/100;
                bonus_xp_attaquant+=bonus_artes_attaquant;
                var bonus_artes_defenseur=0;
                if(liste_heros[id_heros.defenseur]!==undefined&&liste_heros[id_heros.defenseur].bonus_exp!==undefined)var bonus_artes_defenseur=liste_heros[id_heros.defenseur].bonus_exp/100;
                bonus_xp_defenseur+=bonus_artes_defenseur;
                $('#experience tbody').append('<tr>'+'<td>'+((id_heros.attaquant!==null)?formate_honneur(bonus_artes_attaquant):'/')+'</td>'+'<th class="droite">'+_traduction.bonus_artefacts[_langue]+'</th>'+'<td>'+((id_heros.defenseur!==null)?formate_honneur(bonus_artes_defenseur):'/')+'</td>'+'</tr>')
            }
            if(bonus_xp_attaquant>4){
                var bonus_brut_attaquant=bonus_xp_attaquant;
                bonus_xp_attaquant=4;
                var affichage_bonus_attaquant=formate_honneur(bonus_xp_attaquant)+' ('+formate_honneur(bonus_brut_attaquant)+')'
            }else if(bonus_xp_attaquant<-1){
                var bonus_brut_attaquant=bonus_xp_attaquant;
                bonus_xp_attaquant=-1;
                var affichage_bonus_attaquant=formate_honneur(bonus_xp_attaquant)+' ('+formate_honneur(bonus_brut_attaquant)+')'
            }else var affichage_bonus_attaquant=formate_honneur(bonus_xp_attaquant);
            if(bonus_xp_defenseur>4){
                var bonus_brut_defenseur=bonus_xp_defenseur;
                bonus_xp_defenseur=4;
                var affichage_bonus_defenseur=formate_honneur(bonus_xp_defenseur)+' ('+formate_honneur(bonus_brut_defenseur)+')'
            }else if(bonus_xp_defenseur<-1){
                var bonus_brut_defenseur=bonus_xp_defenseur;
                bonus_xp_defenseur=-1;
                var affichage_bonus_defenseur=formate_honneur(bonus_xp_defenseur)+' ('+formate_honneur(bonus_brut_defenseur)+')'
            }else var affichage_bonus_defenseur=formate_honneur(bonus_xp_defenseur);
            if(issue<1){
                bonus_xp_attaquant=0;
                affichage_bonus_attaquant=_traduction.aucun_bonus_defaite[_langue]
            }else{
                bonus_xp_defenseur=0;
                affichage_bonus_defenseur=_traduction.aucun_bonus_defaite[_langue]
            }
            $('#experience tbody').append('<tr>'+'<td>'+((id_heros.attaquant!==null)?formate_puissance(experience_armee_defense):'/')+'</td>'+'<th class="droite">'+_traduction.experience_basique[_langue]+'</th>'+'<td>'+((id_heros.defenseur!==null)?formate_puissance(experience_armee_attaque):'/')+'</td>'+'</tr>');
            $('#experience tbody').append('<tr>'+'<td>'+((id_heros.attaquant!==null)?affichage_bonus_attaquant:'/')+'</td>'+'<th class="droite">'+_traduction.modificateur_total[_langue]+'</th>'+'<td>'+((id_heros.defenseur!==null)?affichage_bonus_defenseur:'/')+'</td>'+'</tr>');
            var experience_totale_attaquant=experience_armee_defense*(1+bonus_xp_attaquant);
            var experience_totale_defenseur=experience_armee_attaque*(1+bonus_xp_defenseur);
            $('#experience tbody').append('<tr>'+'<td>'+((id_heros.attaquant!==null)?formate_puissance(experience_totale_attaquant):'/')+'</td>'+'<th class="droite">'+_traduction.experience_totale[_langue]+'</th>'+'<td>'+((id_heros.defenseur!==null)?formate_puissance(experience_totale_defenseur):'/')+'</td>'+'</tr>');
            pelotons_defense_reordonnes=false
        }
    }

    {
        function tri_pelotons_puissance(){
            for(var p=2;p<9;p++){
                if(pelotons_defenseur[p]!==undefined){
                    var puissance_max=_unites[pelotons_defenseur[p].type].puissance*pelotons_defenseur[p].nombre;
                    for(var pp=p+1;pp<9;pp++){
                        if(pelotons_defenseur[pp]!==undefined&&_unites[pelotons_defenseur[pp].type].puissance*pelotons_defenseur[pp].nombre>puissance_max){
                            puissance_max=_unites[pelotons_defenseur[pp].type].puissance*pelotons_defenseur[pp].nombre;
                            var peloton_temp=pelotons_defenseur[p];
                            pelotons_defenseur[p]=pelotons_defenseur[pp];
                            pelotons_defenseur[pp]=peloton_temp;
                            pelotons_defense_reordonnes=true
                        }
                    }
                }
            }
        }

        function validation_pelotons(){
            var pelotons_valides=0;
            for(var p in pelotons_attaquant){
                if(pelotons_attaquant[p]!==undefined&&pelotons_attaquant[p].type!==undefined&&pelotons_attaquant[p].type>=0&&pelotons_attaquant[p].type<_unites.length&&pelotons_attaquant[p].nombre!==undefined&&pelotons_attaquant[p].nombre>0)pelotons_valides++
            }
            if(pelotons_valides==0)return pelotons_prets_au_combat=false;
            pelotons_valides=0;
            for(var p in pelotons_defenseur){
                if(pelotons_defenseur[p]!==undefined&&pelotons_defenseur[p].type!==undefined&&pelotons_defenseur[p].type>=0&&pelotons_defenseur[p].type<_unites.length&&pelotons_defenseur[p].nombre!==undefined&&pelotons_defenseur[p].nombre>0)pelotons_valides++
            }
            if(pelotons_valides==0)return pelotons_prets_au_combat=false;
            tri_pelotons_puissance();
            return pelotons_prets_au_combat=true
        }
    }

    {
        function avertissement(message){
            var html='<tr><td>'+message+'</td></tr>';
            $('#avertissements').removeClass('cache');
            $('#avertissements tbody').append(html)
        }

        function efface_simulation(){
            $('#avertissements tbody').html('');
            $('#avertissements').addClass('cache');
            $('#victoire caption, #victoire thead, #victoire tbody').html('');
            $('#victoire').addClass('cache');
            $('#combat tbody').html('');
            $('#combat').addClass('cache');
            $('#pertes tbody').html('');
            $('#pertes').addClass('cache');
            $('#butin tbody').html('');
            $('#butin').addClass('cache');
            $('#experience tbody').html('');
            $('#experience').addClass('cache')
        }

        function maj_pelotons(){
            var t=['a','d'];
            var puissance={
                a:0,
                d:0
            };

            delete pelotons_attaquant[0];
            delete pelotons_attaquant[1];
            delete pelotons_defenseur[0];
            delete pelotons_defenseur[1];
            for(var peloton=1;peloton<8;peloton++){
                for(var camp in t){
                    var unite=parseInt($('#rencontre #peloton-'+peloton+' td.unite-'+t[camp]+' select').val(),10);
                    if(unite>=0){
                        $('#peloton-'+peloton+' td.arme-'+t[camp]).html(image_html_arme(_unites[unite].arme,0))
                    }else{
                        $('#peloton-'+peloton+' td.arme-'+t[camp]).html('')
                    }
                    var nombre=parseInt($('#rencontre #peloton-'+peloton+' td.nombre-'+t[camp]+' input').val(),10);
                    if(unite>=0&&nombre>=0){
                        puissance[t[camp]]+=_unites[unite].puissance*nombre;
                        $('#rencontre #peloton-'+peloton+' td.puissance-'+t[camp]+' span').text(formate_puissance(_unites[unite].puissance*nombre));
                        if(t[camp]=='a')pelotons_attaquant[peloton+1]={
                            type:unite,
                            'nombre':nombre,
                            nombre_restant:nombre,
                            nombre_debut_tour:nombre,
                            nombre_pertes:0,
                            nombre_pertes_magie:0,
                            nombre_bonus:0,
                            nombre_bonus_perdu:0,
                            nombre_ranimes:0,
                            disperse:false
                        };

                        if(t[camp]=='d')pelotons_defenseur[peloton+1]={
                            type:unite,
                            'nombre':nombre,
                            nombre_restant:nombre,
                            nombre_debut_tour:nombre,
                            nombre_pertes:0,
                            nombre_pertes_magie:0,
                            nombre_bonus:0,
                            nombre_bonus_perdu:0,
                            nombre_ranimes:0,
                            disperse:false
                        }
                    }else{
                        $('#rencontre #peloton-'+peloton+' td.puissance-'+t[camp]+' span').text('');
                        if(t[camp]=='a')delete pelotons_attaquant[peloton+1];
                        if(t[camp]=='d')delete pelotons_defenseur[peloton+1]
                    }
                }
            }
            if(puissance['a']>=0)$('#rencontre #peloton-total td.puissance-a span').text(formate_puissance(puissance['a']));
            if(puissance['d']>=0)$('#rencontre #peloton-total td.puissance-d span').text(formate_puissance(puissance['d']));
            validation_pelotons()
        }

        function maj_situation(){
            lieu=parseInt($('#lieu-defenseur').val(),10);
            bonus_defense_cite=_fortifications[parseInt($('#fortification-defenseur').val(),10)&3].bonus;
            bonus_defense_region=_fortifications[parseInt($('#fortification-defenseur').val(),10)&60].bonus;
            bonus_dolmens_attaquant=parseInt($('#dolmens-attaquant').val(),10)*10;
            bonus_dolmens_defenseur=parseInt($('#dolmens-defenseur').val(),10)*10;
            honneur_royaume_attaquant=nombre_flottant($('#honneur-royaume-attaquant').val());
            if(honneur_royaume_attaquant===null){
                honneur_royaume_attaquant=0
            }
            honneur_royaume_defenseur=nombre_flottant($('#honneur-royaume-defenseur').val());
            if(honneur_royaume_defenseur===null){
                honneur_royaume_defenseur=0
            }
            bonus_alliance_attaque=_competences_alliance.cri_de_guerre.bonus[parseInt($('#alliance-cri_de_guerre').val(),10)];
            bonus_alliance_defense=_competences_alliance.ralliement.bonus[parseInt($('#alliance-ralliement').val(),10)];
            bonus_alliance_xp_attaquant=_competences_alliance.inspiration.bonus[parseInt($('#alliance-inspiration-attaquant').val(),10)];
            bonus_alliance_xp_defenseur=_competences_alliance.inspiration.bonus[parseInt($('#alliance-inspiration-defenseur').val(),10)];
            if($('#malus-attaque').val().match(/^[0-9]{1,2}$/)){
                if(parseInt($('#malus-attaque').val(),10)>60)$('#malus-attaque').val(60);
                malus_attaque=parseInt($('#malus-attaque').val(),10)
            }else{
                malus_attaque=0;
                $('#malus-attaque').val(0)
            }
            for(var i in _ecoles_magie){
                var guildes_a=parseInt($('#bonus-ecole-'+i+'-attaquant').val(),10);
                var guildes_b=parseInt($('#bonus-ecole-'+i+'-defenseur').val(),10);
                bonus_ecole_attaquant[i]=((guildes_a==0)?0:(guildes_a-1))*5;
                bonus_ecole_defenseur[i]=((guildes_b==0)?0:(guildes_b-1))*5
            }
            bonus_larmes_pertes_attaquant=_bonus_larmes_pertes[parseInt($('#larmes-attaquant').val(),10)];
            bonus_larmes_pertes_defenseur=_bonus_larmes_pertes[parseInt($('#larmes-defenseur').val(),10)];
            bonus_larmes_defense=_bonus_larmes_defense[parseInt($('#larmes-defenseur').val(),10)];
            for(var i in sorts.attaquant)delete sorts.attaquant[i];for(var i in sorts.defenseur)delete sorts.defenseur[i];for(var ch in _competences_hereditaires)if(_competences_hereditaires[ch].combat==1){
                competences_hereditaires.attaquant[ch]=parseInt($('#competence-hereditaire-'+ch+'-attaquant').val(),10);
                competences_hereditaires.defenseur[ch]=parseInt($('#competence-hereditaire-'+ch+'-defenseur').val(),10)
            }
            classement_voies.attaquant=parseInt($('#classement-voies-attaquant').val(),10);
            classement_voies.defenseur=parseInt($('#classement-voies-defenseur').val(),10);
            for(var cs in _competences_speciales){
                competences_speciales.attaquant[cs]=parseInt($('#cs-'+cs+'-attaquant').val(),10);
                competences_speciales.defenseur[cs]=parseInt($('#cs-'+cs+'-defenseur').val(),10)
            }
            var magie=0;
            for(var c in _camps){
                var camp=_camps[c];
                if($('#heros-'+camp).is(':checked')){
                    $('#situation-'+camp+' div.heros').removeClass('cache');
                    if(statut[camp]==0){
                        $('#situation-'+camp+' div.heros>*').addClass('cache');
                        $('#situation-'+camp+' div.heros>ul.heros-identite').removeClass('cache')
                    }
                    if(camp=='attaquant'){
                        id_heros.attaquant=0;
                        var heros=0
                    }else{
                        id_heros.defenseur=1;
                        var heros=1
                    }
                    if(liste_heros[heros]===undefined)liste_heros[heros]={};

                    var niveau=$('#niveau-'+camp).val();
                    liste_heros[heros].niveau=niveau;
                    liste_heros[heros].faction=parseInt($('#faction-'+camp).val(),10);
                    var archetype=$('#archetype-'+camp).val();
                    liste_heros[heros].archetype=archetype;
                    magie+=_archetypes[archetype].magie;
                    liste_heros[heros].attaque=(_archetypes[archetype].attaque==0)?0:_niveaux[niveau][_archetypes[archetype].attaque];
                    liste_heros[heros].defense=(_archetypes[archetype].defense==0)?0:_niveaux[niveau][_archetypes[archetype].defense];
                    liste_heros[heros].magie=(_archetypes[archetype].magie==0)?0:_niveaux[niveau][_archetypes[archetype].magie];
                    for(var c in _talents)for(var t in _talents[c]){
                        if(_talents[c][t].nom_machine!==undefined){
                            liste_heros[heros]['niveau_'+_talents[c][t].nom_machine]=parseInt($('#'+_talents[c][t].nom_machine+'-'+camp).val(),10);
                            liste_heros[heros]['bonus_'+_talents[c][t].nom_machine]=_talents[c][t].v[liste_heros[heros]['niveau_'+_talents[c][t].nom_machine]]
                        }
                    }
                    for(var e in _effets_combat){
                        var nom=_effets_combat[e].nom;
                        var id=_effets_combat[e].id;
                        liste_heros[heros]['bonus_'+nom]=0;
                        for(var s in _slots){
                            var arteId=parseInt($('#arte-'+s+'-'+camp).val(),10);
                            var arte = null;
                            for(var i=0; i < _artefacts.length; i++)
                                if(_artefacts[i].id == arteId)
                                    artefact = _artefacts[i];
                            var effets=artefact.effets;
                            for(var ee in effets)if(inArray(id,effets[ee].id)){
                                var multiplicateur=1;
                                if(artefact.voie!==undefined){
                                    multiplicateur+=_classement_voies[classement_voies[camp]][artefact.voie]*_multiplicateur_voie
                                }
                                liste_heros[heros]['bonus_'+nom]+=_effets[effets[ee].id].v[effets[ee].niv-1]*multiplicateur
                            }
                        }
                    }
                    if(competences_hereditaires[camp].heros_superieur>0){
                        var attaque_heredite=_competences_hereditaires.heros_superieur.bonus.a[competences_hereditaires[camp].heros_superieur];
                        attaque_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.heros_superieur.voie]*_multiplicateur_voie);
                        liste_heros[heros].attaque+=Math.round(attaque_heredite)
                    }else if(competences_hereditaires[camp].revelation_de_caracteristiques>0&&liste_heros[heros].niveau>=15){
                        var attaque_heredite=_competences_hereditaires.revelation_de_caracteristiques.bonus.a[competences_hereditaires[camp].revelation_de_caracteristiques];
                        attaque_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.revelation_de_caracteristiques.voie]*_multiplicateur_voie);
                        liste_heros[heros].attaque+=(Math.round(attaque_heredite)*Math.floor(liste_heros[heros].niveau/15))
                    }else if(competences_hereditaires[camp].revelation_de_caracteristiques_15>0&&liste_heros[heros].niveau>=15){
                        var attaque_heredite=_competences_hereditaires.revelation_de_caracteristiques_15.bonus.a[competences_hereditaires[camp].revelation_de_caracteristiques_15];
                        attaque_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.revelation_de_caracteristiques.voie]*_multiplicateur_voie);
                        if(liste_heros[heros].niveau>=30){
                            var attaque2_heredite=_competences_hereditaires.revelation_de_caracteristiques.bonus.a[competences_hereditaires[camp].revelation_de_caracteristiques_15];
                            attaque2_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.revelation_de_caracteristiques.voie]*_multiplicateur_voie);
                            attaque_heredite+=attaque2_heredite
                        }
                        liste_heros[heros].attaque+=Math.round(attaque_heredite)
                    }else if(competences_hereditaires[camp].revelation_de_caracteristiques_30>0&&liste_heros[heros].niveau>=30){
                        var attaque_heredite=_competences_hereditaires.revelation_de_caracteristiques_30.bonus.a[competences_hereditaires[camp].revelation_de_caracteristiques_30];
                        attaque_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.revelation_de_caracteristiques.voie]*_multiplicateur_voie);
                        liste_heros[heros].attaque+=Math.round(attaque_heredite)*2
                    }
                    var multiplicateur=1;
                    if(liste_heros[heros].bonus_ap!==undefined)multiplicateur+=(liste_heros[heros].bonus_ap/100);
                    if(camp=='attaquant'){
                        if(liste_heros[heros].bonus_legendary_sovereign_b!==undefined)multiplicateur += liste_heros[heros].bonus_legendary_sovereign_b/100;
                        if(liste_heros[heros].bonus_legendary_legwarrior_a!==undefined)multiplicateur += liste_heros[heros].bonus_legendary_legwarrior_a/100;
                        if(liste_heros[heros].bonus_legendary_dragonkinght_c!==undefined)multiplicateur += liste_heros[heros].bonus_legendary_dragonkinght_c/100;
                        multiplicateur+=(bonus_alliance_attaque/100);
                        multiplicateur-=(malus_attaque/100);
                    }
                    liste_heros[heros].attaque_modifiee=liste_heros[heros].attaque*multiplicateur;
                    if(liste_heros[heros].bonus_a!==undefined)liste_heros[heros].attaque_modifiee+=liste_heros[heros].bonus_a;
                    if(competences_hereditaires[camp].heros_superieur>0){
                        var defense_heredite=_competences_hereditaires.heros_superieur.bonus.d[competences_hereditaires[camp].heros_superieur];
                        defense_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.heros_superieur.voie]*_multiplicateur_voie);
                        liste_heros[heros].defense+=Math.round(defense_heredite)
                    }else if(competences_hereditaires[camp].revelation_de_caracteristiques>0&&liste_heros[heros].niveau>=15){
                        var defense_heredite=_competences_hereditaires.revelation_de_caracteristiques.bonus.d[competences_hereditaires[camp].revelation_de_caracteristiques];
                        defense_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.revelation_de_caracteristiques.voie]*_multiplicateur_voie);
                        liste_heros[heros].defense+=(Math.round(defense_heredite)*Math.floor(liste_heros[heros].niveau/15))
                    }else if(competences_hereditaires[camp].revelation_de_caracteristiques_15>0&&liste_heros[heros].niveau>=15){
                        var defense_heredite=_competences_hereditaires.revelation_de_caracteristiques_15.bonus.d[competences_hereditaires[camp].revelation_de_caracteristiques_15];
                        defense_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.revelation_de_caracteristiques.voie]*_multiplicateur_voie);
                        if(liste_heros[heros].niveau>=30){
                            var defense2_heredite=_competences_hereditaires.revelation_de_caracteristiques.bonus.d[competences_hereditaires[camp].revelation_de_caracteristiques_15];
                            defense2_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.revelation_de_caracteristiques.voie]*_multiplicateur_voie);
                            defense_heredite+=defense2_heredite
                        }
                        liste_heros[heros].defense+=Math.round(defense_heredite)
                    }else if(competences_hereditaires[camp].revelation_de_caracteristiques_30>0&&liste_heros[heros].niveau>=30){
                        var defense_heredite=_competences_hereditaires.revelation_de_caracteristiques_30.bonus.d[competences_hereditaires[camp].revelation_de_caracteristiques_30];
                        defense_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.revelation_de_caracteristiques.voie]*_multiplicateur_voie);
                        liste_heros[heros].defense+=Math.round(defense_heredite)*2
                    }
                    var multiplicateur=1;
                    if(liste_heros[heros].bonus_dp!==undefined)multiplicateur+=(liste_heros[heros].bonus_dp/100);
                    if(camp=='defenseur')multiplicateur+=(bonus_alliance_defense/100);
                    liste_heros[heros].defense_modifiee=liste_heros[heros].defense*multiplicateur;
                    if(liste_heros[heros].bonus_d!==undefined)liste_heros[heros].defense_modifiee+=liste_heros[heros].bonus_d;
                    if(competences_hereditaires[camp].heros_superieur>0){
                        var magie_heredite=_competences_hereditaires.heros_superieur.bonus.m[competences_hereditaires[camp].heros_superieur];
                        magie_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.heros_superieur.voie]*_multiplicateur_voie);
                        liste_heros[heros].magie+=Math.round(magie_heredite)
                    }else if(competences_hereditaires[camp].revelation_de_caracteristiques>0&&liste_heros[heros].niveau>=15){
                        var magie_heredite=_competences_hereditaires.revelation_de_caracteristiques.bonus.m[competences_hereditaires[camp].revelation_de_caracteristiques];
                        magie_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.revelation_de_caracteristiques.voie]*_multiplicateur_voie);
                        liste_heros[heros].magie+=(Math.round(magie_heredite)*Math.floor(liste_heros[heros].niveau/15))
                    }else if(competences_hereditaires[camp].revelation_de_caracteristiques_15>0&&liste_heros[heros].niveau>=15){
                        var magie_heredite=_competences_hereditaires.revelation_de_caracteristiques_15.bonus.m[competences_hereditaires[camp].revelation_de_caracteristiques_15];
                        magie_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.revelation_de_caracteristiques.voie]*_multiplicateur_voie);
                        if(liste_heros[heros].niveau>=30){
                            var magie2_heredite=_competences_hereditaires.revelation_de_caracteristiques.bonus.m[competences_hereditaires[camp].revelation_de_caracteristiques_15];
                            magie2_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.revelation_de_caracteristiques.voie]*_multiplicateur_voie);
                            magie_heredite+=magie2_heredite
                        }
                        liste_heros[heros].magie+=Math.round(magie_heredite)
                    }else if(competences_hereditaires[camp].revelation_de_caracteristiques_30>0&&liste_heros[heros].niveau>=30){
                        var magie_heredite=_competences_hereditaires.revelation_de_caracteristiques_30.bonus.m[competences_hereditaires[camp].revelation_de_caracteristiques_30];
                        magie_heredite*=1+(_classement_voies[classement_voies[camp]][_competences_hereditaires.revelation_de_caracteristiques.voie]*_multiplicateur_voie);
                        liste_heros[heros].magie+=Math.round(magie_heredite)*2
                    }
                    var multiplicateur=1;
                    if(liste_heros[heros].bonus_mp!==undefined)multiplicateur+=(liste_heros[heros].bonus_mp/100);
                    liste_heros[heros].magie_modifiee=liste_heros[heros].magie*multiplicateur;
                    if(liste_heros[heros].bonus_m!==undefined)liste_heros[heros].magie_modifiee+=liste_heros[heros].bonus_m;
                    var bonus_attaque=liste_heros[heros].attaque_modifiee-liste_heros[heros].attaque;
                    $('#attaque-heros-'+camp).html(liste_heros[heros].attaque+((bonus_attaque>0)?('<span class="plus">+'+formate_nombre(bonus_attaque,0)+'</span>'):((bonus_attaque<0)?('<span class="moins">'+formate_nombre(bonus_attaque,0)+'</span>'):'')));
                    var bonus_defense=liste_heros[heros].defense_modifiee-liste_heros[heros].defense;
                    $('#defense-heros-'+camp).html(liste_heros[heros].defense+((bonus_defense>0)?('<span class="plus">+'+formate_nombre(bonus_defense,0)+'</span>'):''));
                    var bonus_magie=liste_heros[heros].magie_modifiee-liste_heros[heros].magie;
                    $('#magie-heros-'+camp).html(liste_heros[heros].magie+((bonus_magie>0)?('<span class="plus">+'+formate_nombre(bonus_magie,0)+'</span>'):''));
                    for(var s in _slots){
                        var arte=$('#arte-'+s+'-'+camp).val();
                        liste_heros[heros]['slot_'+s]=arte
                    }
                    var sort1=parseInt($('#sort-'+camp+'-1').val(),10);
                    if(sort1>=0){
                        var tour1=parseInt($('#sort-'+camp+'-1-tour').val(),10);
                        sorts[camp][tour1]=sort1
                    }
                    var sort2=parseInt($('#sort-'+camp+'-2').val(),10);
                    if(sort2>=0){
                        var tour2=parseInt($('#sort-'+camp+'-2-tour').val(),10);
                        sorts[camp][tour2]=sort2
                    }
                }else{
                    $('#situation-'+camp+' div.heros').addClass('cache');
                    id_heros[camp]=null
                }
            }
            if(magie===0){
                $('#magie').addClass('cache')
            }else{
                $('#magie').removeClass('cache')
            }
        }

        function formulaire_heros(camp){
            var html='';
            html+='<div class="heros">';
            html+='<ul class="heros-identite">';
            html+='<li><label for="niveau-'+camp+'">'+toCapitalCase(_traduction.niveau[_langue])+'&nbsp;</label><select id="niveau-'+camp+'">';
            for(var n in _niveaux){
                if(n==1)html+='<option value="1" selected="selected">1</option>';
                else if(n>0)html+='<option value="'+n+'">'+n+'</option>'
            }
            html+='</select></li>';
            html+='<li><label for="faction-'+camp+'">'+toCapitalCase(_traduction.faction[_langue])+'&nbsp;</label><select class="faction" id="faction-'+camp+'">';
            for(var f in _factions)html+='<option value="'+f+'">'+_factions[f].nom[_langue]+'</option>';html+='</select></li>';
            html+='<li><label for="archetype-'+camp+'">'+_traduction.archetype[_langue]+'&nbsp;</label><select class="archetype" id="archetype-'+camp+'">';
            for(var a in _archetypes)html+='<option value="'+a+'">'+_archetypes[a].nom[_langue]+'</option>';html+='</select></li>';
            html+='<li class="a-d-m"> ('+_traduction.attaque[_langue]+_traduction.deux_points[_langue]+' <span id="attaque-heros-'+camp+'"></span> / ';
            html+=_traduction.defense[_langue]+_traduction.deux_points[_langue]+' <span id="defense-heros-'+camp+'"></span> / ';
            html+=_traduction.magie[_langue]+_traduction.deux_points[_langue]+' <span id="magie-heros-'+camp+'"></span>) </li>';
            html+='</ul>';
            html+='<ul class="talents combat">';
            for(var x in _talents_combat[camp]){
                var c=_talents_combat[camp][x].c;
                var t=_talents_combat[camp][x].t;
                var nom=_talents[c][t].nom[_langue];
                var nom_machine=_talents[c][t].nom_machine;
                var valeurs=_talents[c][t].v;
                html+='<li><label for="'+nom_machine+'-'+camp+'">'+nom+'&nbsp;</label><select class="bonus-'+nom_machine+'" id="'+nom_machine+'-'+camp+'">';
                for(var v in valeurs)html+='<option value="'+v+'">'+v+'</option>';html+='</select></li>'
            }
            html+='</ul>';
            html+='<ul class="talents magie">';
            for(var x in _talents_magie){
                var c=_talents_magie[x].c;
                var t=_talents_magie[x].t;
                var nom=_talents[c][t].nom[_langue];
                var nom_machine=_talents[c][t].nom_machine;
                var valeurs=_talents[c][t].v;
                html+='<li><label for="'+nom_machine+'-'+camp+'">'+nom+'&nbsp;</label><select class="bonus-'+nom_machine+'" id="'+nom_machine+'-'+camp+'">';
                for(var v in valeurs)html+='<option value="'+v+'">'+v+'</option>';html+='</select></li>'
            }
            html+='</ul>';
            html+='<ul class="artefacts">';
            for(var s in _slots){
                html+='<li><label for="arte-'+s+'-'+camp+'">'+_traduction.artefact[_langue]+' '+_slots[s][_langue]+'&nbsp;</label><select id="arte-'+s+'-'+camp+'">';
                html+='<option value="0">'+_traduction.aucun[_langue]+'</option>';
                for(var a in _artefacts)if(_artefacts[a].slot==s){
                    html+='<option value="'+ _artefacts[a].id +'">'+_artefacts[a].nom[_langue]+'</option>'
                    // html+='<option value="'+ a +'">'+_artefacts[a].nom[_langue]+'</option>'
                }
                html+='</select></li>'
            }
            html+='</ul>';
            html+='<span class="clear"></span>';
            html+='<div class="guildes-specialisees">';
            var options='';
            for(var i=0;i<13;i++)options+='<option value="'+i+'">'+i+'</option>';
            html+='<span>'+_traduction.guildes_specialisees[_langue]+'</span> ';
            for(var i=0;i<4;i++){
                html+='<label for="bonus-ecole-'+i+'-'+camp+'">'+_ecoles_magie[i].nom[_langue]+' </label><select id="bonus-ecole-'+i+'-'+camp+'">'+options+'</select>';
                if(i<3)html+=', ';else html+='.'
            }
            html+='</div>';
            html+='<div class="competences-hereditaires">';
            var options='';
            for(var i=0;i<11;i++)options+='<option value="'+i+'">'+i+'</option>';
            for(var c in _competences_hereditaires)if(_competences_hereditaires[c].combat==1){
                html+='<label for="competence-hereditaire-'+c+'-'+camp+'">'+_competences_hereditaires[c].nom[_langue]+' </label><select id="competence-hereditaire-'+c+'-'+camp+'">'+options+'</select>';
                if(c!='revelation_de_caracteristiques')html+=' ';else html+=''
            }
            var hideTmp = 'style="display:none;"';
            html+='</div>';
            html+='<br />';
            html+='<div style="text-align:left;"><input id="legendary-classes-' + camp + '" type="button" value="legendary classes" /></div>';
            html+='<div class="competences-legendary-' + camp + '"' +hideTmp+'>';
            for(var x in _talents_legendary_combat[camp]) {
                var c=_talents_legendary_combat[camp][x].c;
                var t = _talents_legendary_combat[camp][x].t;
                var nom = _talents[c][t].nom[_langue];
                var description = _talents[c][t].description[_langue];
                var nom_title = _talents[c][t].nom_title[_langue];
                var nom_machine = _talents[c][t].nom_machine;
                var valeurs = _talents[c][t].v;

                var tmpName = 'competence-legendary-'+nom_machine+'-'+camp;
                if (x%3 == 0) {
                    html+='<br />' + nom_title + ' = ';
                }
                html+=' <label for="'+tmpName+'" title="'+description+'" style="cursor: help;">'+nom+'</label>\n';
                html+='<select class="bonus-'+nom_machine+'" id="'+nom_machine+'-'+camp+'">';
                for(var v in valeurs) {
                    html+='<option value="'+v+'">'+v+'</option>';
                }
                html+='</select>';
                if (x%3 == 2) {
                    html+='<br />';
                } else {
                    html+=',';
                }
            }
            html+='</div>';
            html+='<br />';
            html+='</div>';
            
            return html;
        }

        function formulaire_situation(camp){
            var html='';
            html+='<p>';
            html+='<input type="radio" id="joueur-'+camp+'" name="statut-'+camp+'" value="1" '+((camp=='attaquant')?'checked="checked" ':'')+' />';
            html+='<label for="joueur-'+camp+'"> '+_traduction.joueur[_langue]+'</label>';
            html+='<input type="radio" id="pnj-'+camp+'" name="statut-'+camp+'" value="0" '+((camp=='defenseur')?'checked="checked" ':'')+' />';
            html+='<label for="pnj-'+camp+'"> <abbr title="'+_traduction.PNJ_long[_langue]+'">'+_traduction.PNJ[_langue]+'</abbr></label>';
            html+='<span class="statut-heros">';
            var desactive='';
            html+='<input id="heros-'+camp+'" type="checkbox"'+desactive+' />';
            html+='<label for="heros-'+camp+'"><span class="cap">'+_traduction.heros[_langue]+'</span></label>';
            html+='</span>';
            html+='<span class="nom-heros cache">';
            html+='<select id="monde-'+camp+'" title="'+_traduction.monde[_langue]+'"></select>';
            html+='<input id="nom-heros-'+camp+'" class="nom-heros" type="text" title="'+_traduction.nom[_langue]+'" maxlength="255" />';
            html+='<input id="charge-heros-'+camp+'" class="charge-heros" type="submit" value="'+_traduction.charger[_langue]+'" />';
            html+='</span>';
            html+='</p>';
            html+='<span class="joueur">';
            html+='<ul class="alliance">';
            if(camp=='defenseur'){
                html+='<li><label for="lieu-defenseur"><span class="cap">'+_traduction.lieu[_langue]+'</span> </label>';
                html+='<select id="lieu-defenseur">';
                for(var l in _lieux)html+='<option value="'+l+'">'+_lieux[l].nom[_langue]+'</option>';html+='</select></li>';
                html+='<li class="cache"><label for="fortification-defenseur">'+toCapitalCase(_traduction.fortification[_langue])+' </label>';
                html+='<select id="fortification-defenseur">';
                html+='</select></li>'
            }
            html+='<li><label for="dolmens-'+camp+'">'+_traduction.dolmens_controles[_langue]+' </label>';
            html+='<select id="dolmens-'+camp+'">';
            for(var d=0;d<16;d++)html+='<option value="'+d+'">'+d+'</option>';
            html+='</select></li>';
            html+='<li><label for="larmes-'+camp+'">'+_traduction.graals_controles[_langue]+' </label>';
            html+='<select id="larmes-'+camp+'">';
            for(var i in _bonus_larmes_defense)html+='<option value="'+i+'">'+i+'</option>';html+='</select></li>';
            if(camp=='attaquant'){
                html+='<li><label for="alliance-cri_de_guerre">'+_competences_alliance.cri_de_guerre.nom[_langue]+' </label>';
                html+='<select id="alliance-cri_de_guerre">';
                for(var i in _competences_alliance.cri_de_guerre.bonus)html+='<option value="'+i+'">'+i+'</option>';html+='</select></li>'
            }
            if(camp=='defenseur'){
                html+='<li><label for="alliance-ralliement">'+_competences_alliance.ralliement.nom[_langue]+' </label>';
                html+='<select id="alliance-ralliement">';
                for(var i in _competences_alliance.ralliement.bonus)html+='<option value="'+i+'">'+i+'</option>';html+='</select></li>'
            }
            html+='<li><label for="alliance-inspiration-'+camp+'">'+_competences_alliance.inspiration.nom[_langue]+' </label>';
            html+='<select id="alliance-inspiration-'+camp+'">';
            for(var i in _competences_alliance.inspiration.bonus)html+='<option value="'+i+'">'+i+'</option>';html+='</select></li>';
            if(camp=='attaquant'){
                html+='<li><label for="malus-attaque">'+_traduction.malus_attaque[_langue]+' </label>-';
                html+='<input id="malus-attaque" type="text" value="0" size="2" maxlength="2" />'+_traduction.pourcent[_langue]+'</li>'
            }
            html+='<li><label for="honneur-royaume-'+camp+'">'+_traduction.honneur_royaume[_langue]+' </label>';
            html+='<input class="honneur-royaume" id="honneur-royaume-'+camp+'" type="text" value="0" size="4" maxlength="7" />'+_traduction.pourcent[_langue]+'</li>';
            html+='</ul>';
            html+='</span>';
            html+=formulaire_heros(camp);
            html+='<span class="joueur"><div class="voies">';
            html+='<label for="classement-voies-'+camp+'"><span class="cap">'+_traduction.classement[_langue]+'</span> </label><select id="classement-voies-'+camp+'">';
            for(var c in _classement_voies){
                html+='<option value="'+c+'">'+_classement_voies[c].nom[_langue]+'</option>'
            }
            html+='</select>';
            html+='</div>';
            html+='</span>';
            html+='<div class="competences-speciales">';
            html+='<span>'+_traduction.competences_speciales[_langue]+_traduction.deux_points[_langue]+'</span> ';
            for(var cs in _competences_speciales){
                html+='<label for="cs-'+cs+'-'+camp+'">'+_competences_speciales[cs].nom[_langue]+'</label> ';
                html+='<select id="cs-'+cs+'-'+camp+'">';
                for(var i=0;i<11;i++)html+='<option value="'+i+'">'+i+'</option>';
                html+='</select>';
                if(cs!='pieges')html+=' ';else html+=''
            }
            html+='</div>';
            html+='<span class="clear"></span>';
            $('#situation-'+camp).append(html);
            /* Fix Legendary buttons */
            $('#legendary-classes-' + camp).click(function() {
                $('.competences-legendary-' + camp).toggle();
            });
            /* End fix */
            controle_statut_protagoniste(camp)
        }

        function controle_statut_protagoniste(camp){
            var statut_protagoniste=$('#joueur-'+camp).is(':checked')?1:0;
            if(statut_protagoniste==1){
                $('#situation-'+camp+' div.heros>*').removeClass('cache');
                if($('#heros-'+camp).is(':checked'))$('#situation-'+camp+' div.heros').removeClass('cache');else $('#situation-'+camp+' div.heros').addClass('cache');
                $('#situation-'+camp+' span.joueur').removeClass('cache');
                if(!$('#fortification-defenseur').parent().hasClass('cache')&&inArray([0,3],parseInt($('#lieu-defenseur').val(),10)))$('#fortification-defenseur').parent().addClass('cache');
                if(!$('#situation-'+camp+' div.competences-speciales').hasClass('cache'))$('#situation-'+camp+' div.competences-speciales').addClass('cache');
                $('#situation-'+camp+' div.competences-speciales select').val(0);
                statut[camp]=1
            }else{
                $('#situation-'+camp+' div.heros>*').addClass('cache');
                $('#situation-'+camp+' div.heros>ul.heros-identite').removeClass('cache');
                $('#situation-'+camp+' div.heros .talents select, #situation-'+camp+' div.heros .artefacts select, #situation-'+camp+' div.heros .guildes-specialisees select, #situation-'+camp+' div.heros .competences-hereditaires select').val(0);
                if($('#heros-'+camp).is(':checked'))$('#situation-'+camp+' div.heros').removeClass('cache');else $('#situation-'+camp+' div.heros').addClass('cache');
                $('#situation-'+camp+' span.joueur').addClass('cache');
                $('#situation-'+camp+' span.joueur ul select').val(0);
                $('#situation-'+camp+' span.joueur ul input').val(0);
                if(!$('#fortification-defenseur').parent().hasClass('cache'))$('#fortification-defenseur').parent().addClass('cache');
                $('#situation-'+camp+' div.competences-speciales').removeClass('cache');
                statut[camp]=0
            }
            if(statut.attaquant==1&&statut.defenseur==1){
                rencontre_jcj=true;
                if(honneur_royaume_attaquant===null||honneur_royaume_attaquant===0)$('#honneur-royaume-attaquant').attr('value',0);
                if(honneur_royaume_defenseur===null||honneur_royaume_defenseur===0)$('#honneur-royaume-defenseur').attr('value',0);
                $('.honneur-royaume').parent().removeClass('cache')
            }else{
                rencontre_jcj=false;
                $('.honneur-royaume').parent().addClass('cache')
            }
        }

        function controle_legendary_classes(camp, protagoniste) {
            if (protagoniste.legendary_sovereign_a > 0
                || protagoniste.legendary_sovereign_b > 0
                || protagoniste.legendary_sovereign_c > 0
                || protagoniste.legendary_legwarrior_a > 0
                || protagoniste.legendary_legwarrior_b > 0
                || protagoniste.legendary_legwarrior_c > 0
                || protagoniste.legendary_magehunter_a > 0
                || protagoniste.legendary_magehunter_b > 0
                || protagoniste.legendary_magehunter_c > 0
                || protagoniste.legendary_legpaladin_a > 0
                || protagoniste.legendary_legpaladin_b > 0
                || protagoniste.legendary_legpaladin_c > 0
                || protagoniste.legendary_ethernalnight_a > 0
                || protagoniste.legendary_ethernalnight_b > 0
                || protagoniste.legendary_ethernalnight_c > 0
                || protagoniste.legendary_kingundead_a > 0
                || protagoniste.legendary_kingundead_b > 0
                || protagoniste.legendary_kingundead_c > 0
                || protagoniste.legendary_legmagician_a > 0
                || protagoniste.legendary_legmagician_b > 0
                || protagoniste.legendary_legmagician_c > 0
                || protagoniste.legendary_dragonkinght_a > 0
                || protagoniste.legendary_dragonkinght_b > 0
                || protagoniste.legendary_dragonkinght_c > 0
                ) {
                $('.competences-legendary').show();
            }
            $('#legendary_sovereign_a-'+camp).val(protagoniste.legendary_sovereign_a);
            $('#legendary_sovereign_b-'+camp).val(protagoniste.legendary_sovereign_b);
            $('#legendary_sovereign_c-'+camp).val(protagoniste.legendary_sovereign_c);

            $('#legendary_legwarrior_a-'+camp).val(protagoniste.legendary_legwarrior_a);
            $('#legendary_legwarrior_b-'+camp).val(protagoniste.legendary_legwarrior_b);
            $('#legendary_legwarrior_c-'+camp).val(protagoniste.legendary_legwarrior_c);

            $('#legendary_magehunter_a-'+camp).val(protagoniste.legendary_magehunter_a);
            $('#legendary_magehunter_b-'+camp).val(protagoniste.legendary_magehunter_b);
            $('#legendary_magehunter_c-'+camp).val(protagoniste.legendary_magehunter_c);

            $('#legendary_legpaladin_a-'+camp).val(protagoniste.legendary_legpaladin_a);
            $('#legendary_legpaladin_b-'+camp).val(protagoniste.legendary_legpaladin_b);
            $('#legendary_legpaladin_c-'+camp).val(protagoniste.legendary_legpaladin_c);

            $('#legendary_ethernalnight_a-'+camp).val(protagoniste.legendary_ethernalnight_a);
            $('#legendary_ethernalnight_b-'+camp).val(protagoniste.legendary_ethernalnight_b);
            $('#legendary_ethernalnight_c-'+camp).val(protagoniste.legendary_ethernalnight_c);

            $('#legendary_kingundead_a-'+camp).val(protagoniste.legendary_kingundead_a);
            $('#legendary_kingundead_b-'+camp).val(protagoniste.legendary_kingundead_b);
            $('#legendary_kingundead_c-'+camp).val(protagoniste.legendary_kingundead_c);

            $('#legendary_legmagician_a-'+camp).val(protagoniste.legendary_legmagician_a);
            $('#legendary_legmagician_b-'+camp).val(protagoniste.legendary_legmagician_b);
            $('#legendary_legmagician_c-'+camp).val(protagoniste.legendary_legmagician_c);

            $('#legendary_dragonkinght_a-'+camp).val(protagoniste.legendary_dragonkinght_a);
            $('#legendary_dragonkinght_b-'+camp).val(protagoniste.legendary_dragonkinght_b);
            $('#legendary_dragonkinght_c-'+camp).val(protagoniste.legendary_dragonkinght_c);
        }

        function controle_liste_sorts(faction,cercle,sort_exclu){
            if(cercle===undefined)cercle=5;
            if(faction===undefined)faction=-1;
            if(sort_exclu===undefined)sort_exclu=-1;
            var options='';
            options+='<option value="-1">------------------------</option>';
            if(cercle===0||faction==-1)return options;
            for(var s in _sorts){
                if(inArray(_factions[faction].ecoles,_sorts[s].ecole)&&_sorts[s].cercle<=cercle&&s!=sort_exclu){
                    if(_sorts[s].nom[_langue]!=='')var nom=_sorts[s].nom[_langue];else var nom='['+_sorts[s].nom['en']+']';
                    options+='<option class="e'+_sorts[s].ecole+'" value="'+s+'">'+nom+'</option>'
                }
            }
            return options
        }

        function controle_magie(){
            for(var c in _camps){
                var camp=_camps[c];
                var faction=parseInt($('#faction-'+camp).val(),10);
                var arcanes=_talents[4][1].v[parseInt($('#arcanes-'+camp).val(),10)];
                var heros=$('#heros-'+camp).is(':checked');
                var archetype=parseInt($('#archetype-'+camp).val(),10);
                if(heros&&_archetypes[archetype].magie>0){
                    var sort_1=parseInt($('#sort-'+camp+'-1').val(),10);
                    var sort_2=parseInt($('#sort-'+camp+'-2').val(),10);
                    if(sort_2==sort_1)sort_2=-1;
                    var options=controle_liste_sorts(faction);
                    $('#sort-'+camp+'-1').html(options);
                    $('#sort-'+camp+'-1').val(sort_1);
                    options=controle_liste_sorts(faction,arcanes,sort_1);
                    $('#sort-'+camp+'-2').html(options);
                    $('#sort-'+camp+'-2').val(sort_2)
                }else{
                    var options=controle_liste_sorts();
                    $('#sort-'+camp+'-1').html(options);
                    $('#sort-'+camp+'-2').html(options)
                }
            }
        }

        function controle_liste_tours_magie(tour_exclu){
            if(tour_exclu===undefined)tour_exclu=0;
            var options='';
            for(var t=1;t<15;t++)if(t!=tour_exclu)options+='<option value="'+t+'">'+t+'</option>';return options
        }

        function controle_tours_magie(){
            for(var c in _camps){
                var camp=_camps[c];
                var tour1=parseInt($('#sort-'+camp+'-1-tour').val(),10);
                var options=controle_liste_tours_magie(tour1);
                var valeur=$('#sort-'+camp+'-2-tour').val();
                $('#sort-'+camp+'-2-tour').html(options);
                $('#sort-'+camp+'-2-tour').val(valeur)
            }
        }

        function controle_unite(camp_peloton,id_unite,mode){
            image_css_troupe('image-'+camp_peloton,id_unite);
            var camp=camp_peloton.substr(15,1);
            var peloton=camp_peloton.substr(13,1);
            if(id_unite>-1){
                $('#nombre-'+camp_peloton).removeClass('cache');
                $('tr#peloton-'+peloton+' td.nombre-'+camp+' img').removeClass('cache')
            }else{
                $('#nombre-'+camp_peloton).addClass('cache').attr('value',0);
                $('tr#peloton-'+peloton+' td.nombre-'+camp+' img').addClass('cache')
            }
        }

        function controle_unite_plus_moins(id_controle){
            if(id_controle.substr(0,1)=='p')var c=1;
            else if(id_controle.substr(0,1)=='m')var c=-1;else return false;
            var q=parseInt(id_controle.substr(1,3),10);
            var m=q*c;
            var n=parseInt($('#nombre-'+id_controle.substr(5,id_controle.length-5)).val(),10);
            if((n+m)<0)n=0;else n+=m;
            $('#nombre-'+id_controle.substr(5,id_controle.length-5)).val(n);
            return true
        }

        function controle_peloton_deplacement(id_controle){
            var camp=id_controle.substr(11,1);
            var peloton=parseInt(id_controle.substr(9,1),10);
            if(id_controle.substr(7,1)=='h'&&peloton>1){
                var haut_nombre=$('#nombre-unite-armees-'+peloton+'-'+camp).val();
                var haut_type=$('#unite-armees-'+peloton+'-'+camp).val();
                var bas_nombre=$('#nombre-unite-armees-'+(peloton-1)+'-'+camp).val();
                var bas_type=$('#unite-armees-'+(peloton-1)+'-'+camp).val();
                controle_unite('unite-armees-'+peloton+'-'+camp,bas_type);
                $('#unite-armees-'+peloton+'-'+camp).val(bas_type);
                $('#nombre-unite-armees-'+peloton+'-'+camp).val(bas_nombre);
                controle_unite('unite-armees-'+(peloton-1)+'-'+camp,haut_type);
                $('#unite-armees-'+(peloton-1)+'-'+camp).val(haut_type);
                $('#nombre-unite-armees-'+(peloton-1)+'-'+camp).val(haut_nombre)
            }
            else if(id_controle.substr(7,1)=='b'&&peloton<7){
                var bas_nombre=$('#nombre-unite-armees-'+peloton+'-'+camp).val();
                var bas_type=$('#unite-armees-'+peloton+'-'+camp).val();
                var haut_nombre=$('#nombre-unite-armees-'+(peloton+1)+'-'+camp).val();
                var haut_type=$('#unite-armees-'+(peloton+1)+'-'+camp).val();
                controle_unite('unite-armees-'+peloton+'-'+camp,haut_type);
                $('#unite-armees-'+peloton+'-'+camp).val(haut_type);
                $('#nombre-unite-armees-'+peloton+'-'+camp).val(haut_nombre);
                controle_unite('unite-armees-'+(peloton+1)+'-'+camp,bas_type);
                $('#unite-armees-'+(peloton+1)+'-'+camp).val(bas_type);
                $('#nombre-unite-armees-'+(peloton+1)+'-'+camp).val(bas_nombre)
            }else return false
        }

        function controle_peloton_suppression(camp,peloton){
            controle_unite('unite-armees-'+peloton+'-'+camp,-1);
            $('#unite-armees-'+peloton+'-'+camp).val(-1);
            $('#nombre-unite-armees-'+peloton+'-'+camp).val(0)
        }

        function controle_armees_inversion(){
            for(var p=1;p<8;p++){
                var type=$('#unite-armees-'+p+'-a').val();
                var nombre=parseInt($('#nombre-unite-armees-'+p+'-a').val(),10);
                $('#unite-armees-'+p+'-a').val($('#unite-armees-'+p+'-d').val());
                controle_unite('unite-armees-'+p+'-a',$('#unite-armees-'+p+'-a').val());
                $('#nombre-unite-armees-'+p+'-a').val(parseInt($('#nombre-unite-armees-'+p+'-d').val(),10));
                $('#unite-armees-'+p+'-d').val(type);
                controle_unite('unite-armees-'+p+'-d',$('#unite-armees-'+p+'-d').val());
                $('#nombre-unite-armees-'+p+'-d').val(nombre)
            }
        }

        function controle_situation_inversion(){
            $('#fortification-defenseur').val(0);
            $('#dolmens-attaquant').val(Math.floor(bonus_dolmens_defenseur/10));
            $('#dolmens-defenseur').val(Math.floor(bonus_dolmens_attaquant/10));
            $('#honneur-royaume-attaquant').val(honneur_royaume_defenseur);
            $('#honneur-royaume-defenseur').val(honneur_royaume_attaquant);
            $('#alliance-cri_de_guerre').val(0);
            $('#alliance-ralliement').val(0);
            $('#alliance-inspiration-attaquant').val(inArrayIndex(_competences_alliance.inspiration.bonus,bonus_alliance_xp_defenseur));
            $('#alliance-inspiration-defenseur').val(inArrayIndex(_competences_alliance.inspiration.bonus,bonus_alliance_xp_attaquant));
            $('#malus-attaque').val(0);
            for(var e in _ecoles_magie){
                var guildes_attaquant=parseInt($('#bonus-ecole-'+e+'-attaquant').val(),10);
                $('#bonus-ecole-'+e+'-attaquant').val(parseInt($('#bonus-ecole-'+e+'-defenseur').val(),10));
                $('#bonus-ecole-'+e+'-defenseur').val(guildes_attaquant)
            }
            var larmes_attaquant=parseInt($('#larmes-attaquant').val(),10);
            $('#larmes-attaquant').val(parseInt($('#larmes-defenseur').val(),10));
            $('#larmes-defenseur').val(larmes_attaquant);
            for(var ch in _competences_hereditaires)if(_competences_hereditaires[ch].combat==1){
                var competence_attaquant=parseInt($('#competence-hereditaire-'+ch+'-attaquant').val(),10);
                $('#competence-hereditaire-'+ch+'-attaquant').val(parseInt($('#competence-hereditaire-'+ch+'-defenseur').val(),10));
                $('#competence-hereditaire-'+ch+'-defenseur').val(competence_attaquant)
            }
            var voies_attaquant=parseInt($('#classement-voies-attaquant').val(),10);
            $('#classement-voies-attaquant').val(parseInt($('#classement-voies-defenseur').val(),10));
            $('#classement-voies-defenseur').val(voies_attaquant);
            var temp={
                attaquant:{},
                defenseur:{}
            };

            for(var c in _camps){
                var camp=_camps[c];
                temp[camp].heros=id_heros[camp];
                temp[camp].monde=parseInt($('#monde-'+camp).val(),10);
                temp[camp].nom=$('#nom-heros-'+camp).val();
                temp[camp].niveau=parseInt($('#niveau-'+camp).val(),10);
                temp[camp].faction=parseInt($('#faction-'+camp).val(),10);
                temp[camp].archetype=parseInt($('#archetype-'+camp).val(),10);
                temp[camp].talents=[];
                for(var cr in _talents){
                    temp[camp].talents[cr]=[];
                    for(var t in _talents[cr]){
                        if(_talents[cr][t].nom_machine!==undefined&&$('#'+_talents[cr][t].nom_machine+'-'+camp).attr('id')!==undefined){
                            temp[camp].talents[cr][t]=parseInt($('#'+_talents[cr][t].nom_machine+'-'+camp).val(),10)
                        }
                    }
                }
                temp[camp].arte=[];
                for(var s in _slots){
                    temp[camp].arte[s]=parseInt($('#arte-'+s+'-'+camp).val(),10)
                }
            }
            if(statut.attaquant!=statut.defenseur){
                if(statut.defenseur==1)$('#joueur-attaquant').click();else $('#pnj-attaquant').click();
                if(statut.attaquant==1)$('#joueur-defenseur').click();else $('#pnj-defenseur').click()
            }
            for(var c in _camps){
                controle_statut_protagoniste(_camps[c])
            }
            if((temp.defenseur.heros!==null&&temp.attaquant.heros===null)||(temp.defenseur.heros===null&&temp.attaquant.heros!==null)){
                $('#heros-attaquant').click();
                $('#heros-defenseur').click()
            }
            for(var c in _camps){
                controle_statut_protagoniste(_camps[c])
            }
            for(var c in _camps){
                var camp=_camps[c];
                var c_adverse=(c==1)?0:1;
                var camp_adverse=_camps[c_adverse];
                controle_heros(camp,temp[camp_adverse].monde,temp[camp_adverse].nom,(temp[camp_adverse].nom!=''));
                if(liste_heros[c_adverse]===undefined){
                    $('#niveau-'+camp).val(1);
                    $('#faction-'+camp).val(0);
                    $('#archetype-'+camp).val(0);
                    for(var cr in _talents)for(var t in _talents[cr]){
                        if(_talents[cr][t].nom_machine!==undefined&&$('#'+_talents[cr][t].nom_machine+'-'+camp).attr('id')!==undefined){
                            $('#'+_talents[cr][t].nom_machine+'-'+camp).val(0)
                        }
                    }
                    controle_archetype(camp);
                    for(var s in _slots){
                        $('#arte-'+s+'-'+camp).val(0)
                    }
                }else{
                    $('#niveau-'+camp).val(temp[camp_adverse].niveau);
                    $('#faction-'+camp).val(temp[camp_adverse].faction);
                    $('#archetype-'+camp).val(temp[camp_adverse].archetype);
                    for(var cr in _talents)for(var t in _talents[cr]){
                        if(_talents[cr][t].nom_machine!==undefined&&$('#'+_talents[cr][t].nom_machine+'-'+camp).attr('id')!==undefined){
                            $('#'+_talents[cr][t].nom_machine+'-'+camp).val(temp[camp_adverse].talents[cr][t])
                        }
                    }
                    controle_archetype(camp);
                    for(var s in _slots){
                        $('#arte-'+s+'-'+camp).val(temp[camp_adverse].arte[s])
                    }
                }
            }
            controle_magie()
        }

        function maj(){
            maj_situation();
            maj_pelotons();
            efface_simulation();
            if(pelotons_prets_au_combat)simulation_rencontre()
        }

        function event_debug(event){
            var test=$('#event-debug').html();
            $('#event-debug').html(event+'<br/>'+test)
        }

        function controle_archetype(camp){
            if(_archetypes[parseInt($('#archetype-'+camp).val(),10)].type=='guerrier'){
                $('#situation-'+camp+' ul.talents.magie').addClass('cache');
                $('#situation-'+camp+' ul.talents.magie select').val(0);
                $('#situation-'+camp+' div.guildes-specialisees').addClass('cache');
                $('#situation-'+camp+' div.guildes-specialisees select').val(0)
            }
            else{
                $('#situation-'+camp+' ul.talents.magie').removeClass('cache');
                $('#situation-'+camp+' div.guildes-specialisees').removeClass('cache')
            }
        }
        function controle_heros(camp,monde,nom,chargement){
            if(chargement===undefined)chargement=false;
            if($('#heros-'+camp).is(':checked')){
                if($('#situation-'+camp+' span.nom-heros').hasClass('cache'))$('#situation-'+camp+' span.nom-heros').removeClass('cache');
                if($('#monde-'+camp).html()==''){
                    $('#monde-'+camp).addClass('ui-autocomplete-loading');
                }else{
                    if(monde!==undefined)$('#monde-'+camp).val(monde);
                    if(nom!==undefined)$('#nom-heros-'+camp).val(nom);
                    if(chargement)charge_heros(camp)
                }
            }
            else{
                if(!$('#situation-'+camp+' span.nom-heros').hasClass('cache'))$('#situation-'+camp+' span.nom-heros').addClass('cache');
                $('#monde-'+camp).html('');
                mondes_ok[camp]=false;
                $('#nom-heros-'+camp).val('')
            }
        }

        function controle_competences_hereditaires(competence_modifiee,camp){
            var cat=_competences_hereditaires[competence_modifiee].categorie;
            for(var c in _competences_hereditaires)if(_competences_hereditaires[c].combat==1&&c!=competence_modifiee&&_competences_hereditaires[c].categorie==cat&&$('#competence-hereditaire-'+c+'-'+camp).val()>0){
                $('#competence-hereditaire-'+c+'-'+camp).val(0)
            }
        }

        function evenement_situation_select(){
            if($(this).attr('id').substr(0,5)!='monde'){
                var controles_magie_class=['faction','archetype','bonus-arcanes'];
                if(inArray(controles_magie_class,$(this).attr('class')))controle_magie();
                if($(this).hasClass('archetype'))controle_archetype($(this).attr('id').substr(10));
                if($(this).parent().hasClass('competences-hereditaires')&&$(this).val()>0){
                    var id=$(this).attr('id');
                    controle_competences_hereditaires(id.substr(23,id.length-33),id.substr(-9,9))
                }
                maj_situation();
                if(pelotons_prets_au_combat){
                    maj_pelotons();
                    simulation_rencontre()
                }
            }
        }

        function evenement_situation_input(){
            if(!inArray(['nom-heros','charge-heros'],$(this).attr('id'))){
                var controles_statut_name=['statut-defenseur','statut-attaquant'];
                var controles_magie_id=['heros-attaquant','heros-defenseur'];
                if(inArray(controles_magie_id,$(this).attr('id'))){
                    controle_heros($(this).attr('id').substr(6));
                    controle_magie()
                }
                if(inArray(controles_statut_name,$(this).attr('name'))){
                    var camp=$(this).attr('name').substr(7,9);
                    if($(this).is(':checked'))statut[camp]=parseInt($(this).val(),10);
                    controle_statut_protagoniste(camp)
                }
                maj_situation();
                if(pelotons_prets_au_combat){
                    maj_pelotons();
                    simulation_rencontre()
                }
            }
        }

        function controle_caption(table){
            if($('#'+table+' caption').hasClass('plus')){
                $('#'+table+' caption').removeClass('plus').addClass('moins');
                $('#'+table+' thead, #'+table+' tbody').addClass('cache')
            }else{
                $('#'+table+' caption').addClass('plus').removeClass('moins');
                $('#'+table+' thead, #'+table+' tbody').removeClass('cache')
            }
        }

        function controle_h2(div){
            if($('#'+div+' h2').hasClass('plus')){
                $('#'+div+' h2').removeClass('plus').addClass('moins');
                $('#situation-attaquant, #situation-defenseur').addClass('cache')
            }else{
                $('#'+div+' h2').addClass('plus').removeClass('moins');
                $('#situation-attaquant, #situation-defenseur').removeClass('cache')
            }
        }

        function controle_lieu(){
            if(inArray([0,3],parseInt($('#lieu-defenseur').val(),10))){
                $('#fortification-defenseur').val(0);
                $('#fortification-defenseur').parent().addClass('cache')
            }else{
                if($('#fortification-defenseur').parent().hasClass('cache'))$('#fortification-defenseur').parent().removeClass('cache');
                var html='<option value="0">'+_fortifications[0].nom[_langue];
                if(parseInt($('#lieu-defenseur').val(),10)==1)for(var f=1;f<4;f++)html+='<option value="'+f+'">'+_fortifications[f].nom[_langue]+'</option>';
                if(parseInt($('#lieu-defenseur').val(),10)==2)for(var f in _fortifications)if(f>3&&_fortifications[f].nom!==undefined)html+='<option value="'+f+'">'+_fortifications[f].nom[_langue]+'</option>';$('#fortification-defenseur').html(html)
            }
        }
        function charge_heros(camp){
            $('#charge-heros-'+camp).addClass('ui-autocomplete-loading');
        }
        function controle_description_creature(id_creature,camp){
            if (id_creature==-1) {
                if (!$('#description-creature').hasClass('cache')) {
                    $('#description-creature').addClass('cache');
                }
                $('#description-creature .nom').html('');
                $('#description-creature .proprietes').html('');
            } else {
                var creature=_unites[id_creature];
                $('#description-creature .nom').html(creature.nom[_langue]);
                var faction = '';
                if (creature.faction == -1) {
                    faction = '';
                } else if (creature.faction == -2) {
                    faction = '';
                } else {
                    faction = _factions[creature.faction].nom[_langue]+' — ';
                }
                $('#description-creature .proprietes').html(toCapitalCase(_traduction.rang[_langue])+' '+creature.rang+' — '+faction+_armes[creature.arme][_langue]+' — '+formate_puissance(creature.puissance));
                $('#description-creature').removeClass('cache');
                if(camp=='d')var x=$('#choix-creatures').offset().left-$('#description-creature').width()-11-20;else var x=$('#choix-creatures').offset().left+$('#choix-creatures').width()+22+20;
                var y=$('#choix-creatures').offset().top;
                $('#description-creature').css({
                    'left':x+'px',
                    'top':y+'px'
                })
            }
        }
        function choix_creatures(){
            rangees = [];
            for (var f in _factions) {
                rangees[f*2] = '<tr>';
                rangees[(f*2)+1] = '<tr>';
            }
            rangees.push('<tr>');
            rangees.push('<tr>');
            rangees.push('<tr>');
            var neutres = 0;
            var faction_new = 0;
            for (var u in _unites) {
                if (_unites[u].faction >= 0) {
                    rangees[(_unites[u].faction*2)+_unites[u].plus] += '<td>'+image_html_troupe(u,4|2,'choix-creature-'+u,'choix-creature')+'</td>';
                } else if (_unites[u].faction == -2) {
                    rangees[rangees.length-1+Math.floor(faction_new++/8)] += '<td>'+image_html_troupe(u,4|2,'choix-creature-'+u,'choix-creature')+'</td>';
                } else {
                    rangees[rangees.length-3+Math.floor(neutres++/8)] += '<td>'+image_html_troupe(u,4|2,'choix-creature-'+u,'choix-creature')+'</td>';
                }
            }
            var tableau = '<div id="choix-creatures" class="cache"><table><tbody>';
            tableau += '<tr><td colspan="8">';
            tableau += '<img src="images/unite-suppression.png" class="choix-creature" id="suppression-peloton" title="'+_traduction.aucun[_langue]+'" />'
            tableau += '</td></tr>';
            for (var r in rangees) {
                tableau += rangees[r] + '</tr>';
            }
            tableau += '</tbody></table></div>';
            tableau += '<div id="description-creature" class="cache"><div class="nom"></div><div class="proprietes"></div></div>';
            return tableau;
        }

        function initialise_controles(){
            
            $('#saison').change(function(){
                saveVersionInCookie();
                nouvelle_saison=controle_saison();
                
                saison=$('#saison').val();
                maj();
            });
            formulaire_situation('attaquant');
            formulaire_situation('defenseur');
            $('#situation select').bind('change keyup',evenement_situation_select);
            $('#situation input').bind('change',evenement_situation_input);
            $('input#nom-heros-attaquant').autocomplete({
                minLength:4,
                source:function(request,response){
                    var liste=[];
                }
            });
            $('input#nom-heros-defenseur').autocomplete({
                minLength:2,
                source:function(request,response){
                    var liste=[];
                }
            });
            $('input.charge-heros').click(function(){
                charge_heros($(this).attr('id').substr(13))
            });
            $('#lieu-defenseur').bind('change keyup',function(){
                controle_lieu();
                maj()
            });
            $('#situation h2').click(function(){
                controle_h2('situation')
            });
            $('#situation h3 span.inversion').click(function(){
                controle_situation_inversion();
                maj()
            });
            var options='<option value="-1"></option>';
            for(var u in _unites){
                if(window.innerWidth<1285&&_unites[u].nom_abrege!==undefined&&_unites[u].nom_abrege[_langue]!==undefined)var unite_nom=_unites[u].nom_abrege[_langue];else var unite_nom=_unites[u].nom[_langue];
                options+='<option value="'+u+'" class="f'+_unites[u].faction+'">'+unite_nom+'</option>'
            }
            var t=['a','d'];
            for(var peloton=1;peloton<8;peloton++){
                for(var camp in t){
                    var select='';
                    if(t[camp]=='a'){
                        select+=image_html_croix(t[camp],peloton)
                    }
                    if(t[camp]=='d'){
                        select+='<img src="images/unite.png" id="image-unite-armees-'+peloton+'-'+t[camp]+'" class="image-unite-armees" width="23px" height="22px" />';
                        select+='<div class="fleches-peloton">'+image_html_fleche('h',t[camp],peloton)+image_html_fleche('b',t[camp],peloton)+'</div>'
                    }
                    select+='<select id="unite-armees-'+peloton+'-'+t[camp]+'">'+options+'</select>';
                    if(t[camp]=='d'){
                        select+=image_html_croix(t[camp],peloton)
                    }
                    if(t[camp]=='a'){
                        select+='<div class="fleches-peloton">'+image_html_fleche('h',t[camp],peloton)+image_html_fleche('b',t[camp],peloton)+'</div>';
                        select+='<img src="images/unite.png" id="image-unite-armees-'+peloton+'-'+t[camp]+'" class="image-unite-armees" width="23px" height="22px" />'
                    }
                    $('#rencontre #peloton-'+peloton+' td.unite-'+t[camp]).html(select);
                    image_css_troupe('image-unite-armees-'+peloton+'-'+t[camp],-1);
                    var id='unite-armees-'+peloton+'-'+t[camp];
                    var input='';
                    input+=image_html_plus_moins('m',100,id);
                    input+=image_html_plus_moins('m',10,id);
                    input+=image_html_plus_moins('m',1,id);
                    input+='<input type="text" value="0" size="4" maxlength="5" id="nombre-unite-armees-'+peloton+'-'+t[camp]+'" />';
                    input+=image_html_plus_moins('p',1,id);
                    input+=image_html_plus_moins('p',10,id);
                    input+=image_html_plus_moins('p',100,id);
                    $('#rencontre #peloton-'+peloton+' td.nombre-'+t[camp]).html(input);
                    var span='<span></span>';
                    $('#rencontre #peloton-'+peloton+' td.puissance-'+t[camp]).html(span)
                }
            }
            $('#rencontre #peloton-total td.puissance-a').html('<span></span>');
            $('#rencontre #peloton-total td.puissance-d').html('<span></span>');
            $('#rencontre input').addClass('cache');
            $('#rencontre img.plus-moins').addClass('cache');
            $('#rencontre select').bind('change keyup',function(){
                controle_unite($(this).attr('id'),$(this).val());
                maj()
            });
            $('.image-unite-armees').click(function(event){
                $('#choix-creatures').removeClass('cache');
                $('#choix-creatures').css({
                    'top':($(this).offset().top-11)+'px',
                    'left':($(this).offset().left-($('#choix-creatures').width()/2))+'px'
                });
                choix_creature=$(this).attr('id').substr(19)
            });
            $('#rencontre input').bind('change keyup',function(){
                maj()
            });
            $('#rencontre img.plus-moins').click(function(){
                controle_unite_plus_moins($(this).attr('id'));
                maj()
            });
            $('#rencontre img.plus-moins').hover(function(){
                modifie_image_plus_moins($(this).attr('id'),true)
            },function(){
                modifie_image_plus_moins($(this).attr('id'),false)
            });
            $('#rencontre img.fleche').click(function(){
                controle_peloton_deplacement($(this).attr('id'));
                maj()
            });
            $('#rencontre img.fleche').hover(function(){
                modifie_image_fleche($(this).attr('id'),true)
            },function(){
                modifie_image_fleche($(this).attr('id'),false)
            });
            $('#rencontre img.croix').click(function(){
                var camp=$(this).attr('id').substr(8,1);
                var peloton=parseInt($(this).attr('id').substr(6,1),10);
                controle_peloton_suppression(camp,peloton);
                maj()
            });
            $('#rencontre img.croix').hover(function(){
                modifie_image_croix($(this).attr('id'),true)
            },function(){
                modifie_image_croix($(this).attr('id'),false)
            });
            $('#rencontre caption').click(function(){
                controle_caption('rencontre')
            });
            $('#rencontre th span.inversion').click(function(){
                controle_armees_inversion();
                maj()
            });
            $('body').append(choix_creatures());
            $('#choix-creatures').css({
                'top':($('#image-unite-armees-1-a').offset().top-11)+'px',
                'left':($('#image-unite-armees-1-a').offset().left)+'px'
            });
            $('#choix-creatures').mouseout(function(event){
                if(!$('#choix-creatures').hasClass('cache'))$('#choix-creatures').addClass('cache')
            });
            $('#choix-creatures img, #choix-creatures tr').mouseout(function(event){
                event.stopPropagation()
            });
            $('.choix-creature').mouseover(function(event){
                if($(this).css('background-position')){
                    var bg=$(this).css('background-position').replace(/-22px$/,'0px');
                    $(this).css('background-position',bg)
                }
                var camp=choix_creature.substr(2,1);
                if($(this).attr('id')!='suppression-peloton')controle_description_creature($(this).attr('id').substr(15),camp)
            });
            $('.choix-creature').mouseout(function(){
                if($(this).css('background-position')){
                    var bg=$(this).css('background-position').replace(/0px$/,'-22px');
                    $(this).css('background-position',bg)
                }
                controle_description_creature(-1)
            });
            $('.choix-creature').click(function(){
                if(choix_creature!==null){
                    if($(this).attr('id')=='suppression-peloton'){
                        var camp=choix_creature.substr(2,1);
                        var peloton=parseInt(choix_creature.substr(0,1),10);
                        controle_peloton_suppression(camp,peloton);
                        maj()
                    }else{
                        var id_creature=parseInt($(this).attr('id').substr(15),10);
                        $('#unite-armees-'+choix_creature).val(id_creature);
                        controle_unite('unite-armees-'+choix_creature,id_creature);
                        maj()
                    }
                }
                $('#choix-creatures').addClass('cache')
            });
            var html='<tr>';
            html+='<td><select id="sort-attaquant-1" class="choix-sort"></select></td>';
            html+='<td><select id="sort-attaquant-1-tour" class="choix-tour-sort">'+controle_liste_tours_magie()+'</select></td>';
            html+='<td><select id="sort-defenseur-1" class="choix-sort"></select></td>';
            html+='<td><select id="sort-defenseur-1-tour" class="choix-tour-sort">'+controle_liste_tours_magie()+'</select></td>';
            html+='</tr><tr>';
            html+='<td><select id="sort-attaquant-2" class="choix-sort"></select></td>';
            html+='<td><select id="sort-attaquant-2-tour" class="choix-tour-sort">'+controle_liste_tours_magie(1)+'</select></td>';
            html+='<td><select id="sort-defenseur-2" class="choix-sort"></select></td>';
            html+='<td><select id="sort-defenseur-2-tour" class="choix-tour-sort">'+controle_liste_tours_magie(1)+'</select></td>';
            html+='</tr>';
            $('#magie tbody').html(html);
            $('#magie').addClass('cache');
            controle_magie();
            controle_tours_magie();
            $('#magie select.choix-sort').bind('change keyup',function(){
                controle_magie();
                maj_situation();
                efface_simulation();
                if(pelotons_prets_au_combat){
                    maj_pelotons();
                    simulation_rencontre()
                }
            });
            $('#magie select.choix-tour-sort').bind('change keyup',function(){
                controle_tours_magie();
                maj_situation();
                efface_simulation();
                if(pelotons_prets_au_combat){
                    maj_pelotons();
                    simulation_rencontre()
                }
            });
            $('#magie caption').click(function(){
                controle_caption('magie')
            });
            $('#victoire caption').click(function(){
                if($('#victoire caption').hasClass('plus-v')){
                    $('#victoire caption').removeClass('plus-v').addClass('moins-v');
                    $('#victoire thead, #victoire tbody').addClass('cache')
                }else{
                    $('#victoire caption').addClass('plus-v').removeClass('moins-v');
                    $('#victoire thead, #victoire tbody').removeClass('cache')
                }
            });
            $('#avertissements caption').click(function(){
                controle_caption('avertissements')
            });
            $('img.icone-sort').live('click',function(){
                if(detail_sorts){
                    $('#combat div.barre.sort').parent().addClass('cache');
                    detail_sorts=false
                }else{
                    $('#combat div.barre.sort').parent().removeClass('cache');
                    detail_sorts=true
                }
            });
            $('#combat td.issue').live('click',function(){
                if(detail_combats){
                    $('#combat div.barre.attaquant, #combat div.barre.defenseur').addClass('cache');
                    detail_combats=false
                }else{
                    $('#combat div.barre.attaquant, #combat div.barre.defenseur').removeClass('cache');
                    detail_combats=true
                }
            });
            $('#combat caption').click(function(){
                controle_caption('combat')
            });
            $('#pertes caption').click(function(){
                controle_caption('pertes')
            });
            $('#experience caption').click(function(){
                controle_caption('experience')
            })
        }
    }

    {
        var liste_heros=[];
        var id_heros={
            attaquant:null,
            defenseur:null
        };

        var pelotons_attaquant=[];
        var pelotons_defenseur=[];
        var peloton_attaque=0;
        var peloton_defense=0;
        var dernier_peloton=null;
        var sorts={
            attaquant:[],
            defenseur:[]
        };

        var rencontre_jcj=false;
        var statut={
            attaquant:1,
            defenseur:0
        };

        var lieu=0;
        var bonus_defense_cite=0;
        var bonus_defense_region=0;
        var bonus_dolmens_attaquant=0;
        var bonus_dolmens_defenseur=0;
        var honneur_royaume_attaquant=0;
        var honneur_royaume_defenseur=0;
        var bonus_alliance_attaque=0;
        var bonus_alliance_defense=0;
        var bonus_alliance_xp_attaquant=0;
        var bonus_alliance_xp_defenseur=0;
        var malus_attaque=0;
        var competences_hereditaires={
            attaquant:{
                butin_de_guerre:0,
                relever_les_morts:0,
                resistance_magique:0,
                moral_eleve:0,
                resurrection:0,
                tir_de_barrage:0,
                heros_superieur:0,
                maitrise_des_sorts:0,
                revelation_de_caracteristiques:0
            },
            defenseur:{
                butin_de_guerre:0,
                relever_les_morts:0,
                resistance_magique:0,
                moral_eleve:0,
                resurrection:0,
                tir_de_barrage:0,
                heros_superieur:0,
                maitrise_des_sorts:0,
                revelation_de_caracteristiques:0
            }
        };

        var competences_speciales={
            attaquant:{
                antimagie:0,
                baliste:0,
                pieges:0
            },
            defenseur:{
                antimagie:0,
                baliste:0,
                pieges:0
            }
        };

        var moral_eleve={};

        var classement_voies={
            attaquant:0,
            defenseur:0
        };

        var nouvelle_saison=false;
        var saison=3;
        var bonus_ecole_attaquant=[0,0,0,0];
        var bonus_ecole_defenseur=[0,0,0,0];
        var bonus_larmes_pertes_attaquant=0;
        var bonus_larmes_pertes_defenseur=0;
        var bonus_larmes_defense=0;
        var bonus_arme=0;
        var pelotons_defense_reordonnes=false;
        var pelotons_prets_au_combat=false;
        var detail_combats=false;
        var detail_sorts=false;
        var mondes_ok={
            attaquant:false,
            defenseur:false
        };

        var choix_creature=null
    }

    javascript_active();
    affichage_version();
    initialise_controles();
    efface_simulation();
    var get=document.location.search;
    var p=get.indexOf('info=');
    if(p!=-1){
        analyse_info_url(get.substr(p+5),168);
        maj_situation();
        maj_pelotons();
        efface_simulation();
        if(pelotons_prets_au_combat==true)simulation_rencontre();
        for(var c in _camps)controle_heros(_camps[c])
    }
    tiny_url();
    $.preloadImages(_images)
});